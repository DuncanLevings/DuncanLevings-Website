  var WindowedObservable = (function (__super__) ***REMOVED***

    function subscribe (observer) ***REMOVED***
      this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));

      var self = this;
      timeoutScheduler.schedule(function () ***REMOVED***
        self.source.request(self.windowSize);
      ***REMOVED***);

      return this.subscription;
    ***REMOVED***

    inherits(WindowedObservable, __super__);

    function WindowedObservable(source, windowSize) ***REMOVED***
      __super__.call(this, subscribe, source);
      this.source = source;
      this.windowSize = windowSize;
    ***REMOVED***

    var WindowedObserver = (function (__sub__) ***REMOVED***

      inherits(WindowedObserver, __sub__);

      function WindowedObserver(observer, observable, cancel) ***REMOVED***
        this.observer = observer;
        this.observable = observable;
        this.cancel = cancel;
        this.received = 0;
      ***REMOVED***

      var windowedObserverPrototype = WindowedObserver.prototype;

      windowedObserverPrototype.completed = function () ***REMOVED***
        this.observer.onCompleted();
        this.dispose();
      ***REMOVED***;

      windowedObserverPrototype.error = function (error) ***REMOVED***
        this.observer.onError(error);
        this.dispose();
      ***REMOVED***;

      windowedObserverPrototype.next = function (value) ***REMOVED***
        this.observer.onNext(value);

        this.received = ++this.received % this.observable.windowSize;
        if (this.received === 0) ***REMOVED***
          var self = this;
          timeoutScheduler.schedule(function () ***REMOVED***
            self.observable.source.request(self.observable.windowSize);
          ***REMOVED***);
        ***REMOVED***
      ***REMOVED***;

      windowedObserverPrototype.dispose = function () ***REMOVED***
        this.observer = null;
        if (this.cancel) ***REMOVED***
          this.cancel.dispose();
          this.cancel = null;
        ***REMOVED***
        __sub__.prototype.dispose.call(this);
      ***REMOVED***;

      return WindowedObserver;
    ***REMOVED***(AbstractObserver));

    return WindowedObservable;
  ***REMOVED***(Observable));

  /**
   * Creates a sliding windowed observable based upon the window size.
   * @param ***REMOVED***Number***REMOVED*** windowSize The number of items in the window
   * @returns ***REMOVED***Observable***REMOVED*** A windowed observable based upon the window size.
   */
  ControlledObservable.prototype.windowed = function (windowSize) ***REMOVED***
    return new WindowedObservable(this, windowSize);
  ***REMOVED***;
