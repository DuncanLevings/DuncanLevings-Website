  var ControlledObservable = (function (__super__) ***REMOVED***

    inherits(ControlledObservable, __super__);

    function subscribe (observer) ***REMOVED***
      return this.source.subscribe(observer);
    ***REMOVED***

    function ControlledObservable (source, enableQueue) ***REMOVED***
      __super__.call(this, subscribe, source);
      this.subject = new ControlledSubject(enableQueue);
      this.source = source.multicast(this.subject).refCount();
    ***REMOVED***

    ControlledObservable.prototype.request = function (numberOfItems) ***REMOVED***
      if (numberOfItems == null) ***REMOVED*** numberOfItems = -1; ***REMOVED***
      return this.subject.request(numberOfItems);
    ***REMOVED***;

    return ControlledObservable;

  ***REMOVED***(Observable));

  var ControlledSubject = (function (__super__) ***REMOVED***

    function subscribe (observer) ***REMOVED***
      return this.subject.subscribe(observer);
    ***REMOVED***

    inherits(ControlledSubject, __super__);

    function ControlledSubject(enableQueue) ***REMOVED***
      enableQueue == null && (enableQueue = true);

      __super__.call(this, subscribe);
      this.subject = new Subject();
      this.enableQueue = enableQueue;
      this.queue = enableQueue ? [] : null;
      this.requestedCount = 0;
      this.requestedDisposable = disposableEmpty;
      this.error = null;
      this.hasFailed = false;
      this.hasCompleted = false;
      this.controlledDisposable = disposableEmpty;
    ***REMOVED***

    addProperties(ControlledSubject.prototype, Observer, ***REMOVED***
      onCompleted: function () ***REMOVED***
        this.hasCompleted = true;
        (!this.enableQueue || this.queue.length === 0) && this.subject.onCompleted();
      ***REMOVED***,
      onError: function (error) ***REMOVED***
        this.hasFailed = true;
        this.error = error;
        (!this.enableQueue || this.queue.length === 0) && this.subject.onError(error);
      ***REMOVED***,
      onNext: function (value) ***REMOVED***
        var hasRequested = false;

        if (this.requestedCount === 0) ***REMOVED***
          this.enableQueue && this.queue.push(value);
        ***REMOVED*** else ***REMOVED***
          (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
          hasRequested = true;
        ***REMOVED***
        hasRequested && this.subject.onNext(value);
      ***REMOVED***,
      _processRequest: function (numberOfItems) ***REMOVED***
        if (this.enableQueue) ***REMOVED***
          while (this.queue.length >= numberOfItems && numberOfItems > 0) ***REMOVED***
            this.subject.onNext(this.queue.shift());
            numberOfItems--;
          ***REMOVED***

          return this.queue.length !== 0 ?
            ***REMOVED*** numberOfItems: numberOfItems, returnValue: true ***REMOVED*** :
            ***REMOVED*** numberOfItems: numberOfItems, returnValue: false ***REMOVED***;
        ***REMOVED***

        if (this.hasFailed) ***REMOVED***
          this.subject.onError(this.error);
          this.controlledDisposable.dispose();
          this.controlledDisposable = disposableEmpty;
        ***REMOVED*** else if (this.hasCompleted) ***REMOVED***
          this.subject.onCompleted();
          this.controlledDisposable.dispose();
          this.controlledDisposable = disposableEmpty;
        ***REMOVED***

        return ***REMOVED*** numberOfItems: numberOfItems, returnValue: false ***REMOVED***;
      ***REMOVED***,
      request: function (number) ***REMOVED***
        this.disposeCurrentRequest();
        var self = this, r = this._processRequest(number);

        var number = r.numberOfItems;
        if (!r.returnValue) ***REMOVED***
          this.requestedCount = number;
          this.requestedDisposable = disposableCreate(function () ***REMOVED***
            self.requestedCount = 0;
          ***REMOVED***);

          return this.requestedDisposable
        ***REMOVED*** else ***REMOVED***
          return disposableEmpty;
        ***REMOVED***
      ***REMOVED***,
      disposeCurrentRequest: function () ***REMOVED***
        this.requestedDisposable.dispose();
        this.requestedDisposable = disposableEmpty;
      ***REMOVED***
    ***REMOVED***);

    return ControlledSubject;
  ***REMOVED***(Observable));

  /**
   * Attaches a controller to the observable sequence with the ability to queue.
   * @example
   * var source = Rx.Observable.interval(100).controlled();
   * source.request(3); // Reads 3 values
   * @param ***REMOVED***Observable***REMOVED*** pauser The observable sequence used to pause the underlying sequence.
   * @returns ***REMOVED***Observable***REMOVED*** The observable sequence which is paused based upon the pauser.
   */
  observableProto.controlled = function (enableQueue) ***REMOVED***
    if (enableQueue == null) ***REMOVED***  enableQueue = true; ***REMOVED***
    return new ControlledObservable(this, enableQueue);
  ***REMOVED***;
