  /**
   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
   *  If a violation is detected, an Error is thrown from the offending observer method call.
   *
   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
   */
  Observer.prototype.checked = function () ***REMOVED*** return new CheckedObserver(this); ***REMOVED***;

  /**
   * Schedules the invocation of observer methods on the given scheduler.
   * @param ***REMOVED***Scheduler***REMOVED*** scheduler Scheduler to schedule observer messages on.
   * @returns ***REMOVED***Observer***REMOVED*** Observer whose messages are scheduled on the given scheduler.
   */
  Observer.notifyOn = function (scheduler) ***REMOVED***
    return new ObserveOnObserver(scheduler, this);
  ***REMOVED***;

  /**
  *  Creates an observer from a notification callback.
  * @param ***REMOVED***Function***REMOVED*** handler Action that handles a notification.
  * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
  */
  Observer.fromNotifier = function (handler, thisArg) ***REMOVED***
    var handlerFunc = bindCallback(handler, thisArg, 1);
    return new AnonymousObserver(function (x) ***REMOVED***
      return handlerFunc(notificationCreateOnNext(x));
    ***REMOVED***, function (e) ***REMOVED***
      return handlerFunc(notificationCreateOnError(e));
    ***REMOVED***, function () ***REMOVED***
      return handlerFunc(notificationCreateOnCompleted());
    ***REMOVED***);
  ***REMOVED***;

  /**
  *  Creates a notification callback from an observer.
  * @returns The action that forwards its input notification to the underlying observer.
  */
  Observer.prototype.toNotifier = function () ***REMOVED***
    var observer = this;
    return function (n) ***REMOVED*** return n.accept(observer); ***REMOVED***;
  ***REMOVED***;

  /**
  *  Hides the identity of an observer.
  * @returns An observer that hides the identity of the specified observer.
  */
  Observer.prototype.asObserver = function () ***REMOVED***
    var source = this;
    return new AnonymousObserver(
      function (x) ***REMOVED*** source.onNext(x); ***REMOVED***,
      function (e) ***REMOVED*** source.onError(e); ***REMOVED***,
      function () ***REMOVED*** source.onCompleted(); ***REMOVED***
    );
  ***REMOVED***;
