  function ActivePlan(joinObserverArray, onNext, onCompleted) ***REMOVED***
    this.joinObserverArray = joinObserverArray;
    this.onNext = onNext;
    this.onCompleted = onCompleted;
    this.joinObservers = new Map();
    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) ***REMOVED***
      var joinObserver = this.joinObserverArray[i];
      this.joinObservers.set(joinObserver, joinObserver);
    ***REMOVED***
  ***REMOVED***

  ActivePlan.prototype.dequeue = function () ***REMOVED***
    this.joinObservers.forEach(function (v) ***REMOVED*** v.queue.shift(); ***REMOVED***);
  ***REMOVED***;

  ActivePlan.prototype.match = function () ***REMOVED***
    var i, len, hasValues = true;
    for (i = 0, len = this.joinObserverArray.length; i < len; i++) ***REMOVED***
      if (this.joinObserverArray[i].queue.length === 0) ***REMOVED***
        hasValues = false;
        break;
      ***REMOVED***
    ***REMOVED***
    if (hasValues) ***REMOVED***
      var firstValues = [],
          isCompleted = false;
      for (i = 0, len = this.joinObserverArray.length; i < len; i++) ***REMOVED***
        firstValues.push(this.joinObserverArray[i].queue[0]);
        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
      ***REMOVED***
      if (isCompleted) ***REMOVED***
        this.onCompleted();
      ***REMOVED*** else ***REMOVED***
        this.dequeue();
        var values = [];
        for (i = 0, len = firstValues.length; i < firstValues.length; i++) ***REMOVED***
          values.push(firstValues[i].value);
        ***REMOVED***
        this.onNext.apply(this, values);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;
