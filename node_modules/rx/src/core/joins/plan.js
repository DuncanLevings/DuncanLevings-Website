  function Plan(expression, selector) ***REMOVED***
      this.expression = expression;
      this.selector = selector;
  ***REMOVED***

  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) ***REMOVED***
    var self = this;
    var joinObservers = [];
    for (var i = 0, len = this.expression.patterns.length; i < len; i++) ***REMOVED***
      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
    ***REMOVED***
    var activePlan = new ActivePlan(joinObservers, function () ***REMOVED***
      var result;
      try ***REMOVED***
        result = self.selector.apply(self, arguments);
      ***REMOVED*** catch (e) ***REMOVED***
        observer.onError(e);
        return;
      ***REMOVED***
      observer.onNext(result);
    ***REMOVED***, function () ***REMOVED***
      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) ***REMOVED***
        joinObservers[j].removeActivePlan(activePlan);
      ***REMOVED***
      deactivate(activePlan);
    ***REMOVED***);
    for (i = 0, len = joinObservers.length; i < len; i++) ***REMOVED***
      joinObservers[i].addActivePlan(activePlan);
    ***REMOVED***
    return activePlan;
  ***REMOVED***;

  function planCreateObserver(externalSubscriptions, observable, onError) ***REMOVED***
    var entry = externalSubscriptions.get(observable);
    if (!entry) ***REMOVED***
      var observer = new JoinObserver(observable, onError);
      externalSubscriptions.set(observable, observer);
      return observer;
    ***REMOVED***
    return entry;
  ***REMOVED***
