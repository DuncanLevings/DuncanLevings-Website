  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) ***REMOVED***
    inherits(AnonymousObservable, __super__);

    // Fix subscriber to check for undefined or function returned to decorate as Disposable
    function fixSubscriber(subscriber) ***REMOVED***
      if (subscriber && typeof subscriber.dispose === 'function') ***REMOVED*** return subscriber; ***REMOVED***

      return typeof subscriber === 'function' ?
        disposableCreate(subscriber) :
        disposableEmpty;
    ***REMOVED***

    function AnonymousObservable(subscribe, parent) ***REMOVED***
      this.source = parent;
      if (!(this instanceof AnonymousObservable)) ***REMOVED***
        return new AnonymousObservable(subscribe);
      ***REMOVED***

      function s(observer) ***REMOVED***
        var setDisposable = function () ***REMOVED***
          try ***REMOVED***
            autoDetachObserver.setDisposable(fixSubscriber(subscribe(autoDetachObserver)));
          ***REMOVED*** catch (e) ***REMOVED***
            if (!autoDetachObserver.fail(e)) ***REMOVED***
              throw e;
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***;

        var autoDetachObserver = new AutoDetachObserver(observer);
        if (currentThreadScheduler.scheduleRequired()) ***REMOVED***
          currentThreadScheduler.schedule(setDisposable);
        ***REMOVED*** else ***REMOVED***
          setDisposable();
        ***REMOVED***

        return autoDetachObserver;
      ***REMOVED***

      __super__.call(this, s);
    ***REMOVED***

    return AnonymousObservable;

  ***REMOVED***(Observable));
