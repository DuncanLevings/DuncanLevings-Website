  /**
   * Gets a scheduler that schedules work as soon as possible on the current thread.
   */
  var currentThreadScheduler = Scheduler.currentThread = (function () ***REMOVED***
    var queue;

    function runTrampoline (q) ***REMOVED***
      var item;
      while (q.length > 0) ***REMOVED***
        item = q.dequeue();
        if (!item.isCancelled()) ***REMOVED***
          // Note, do not schedule blocking work!
          while (item.dueTime - Scheduler.now() > 0) ***REMOVED***
          ***REMOVED***
          if (!item.isCancelled()) ***REMOVED***
            item.invoke();
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***

    function scheduleNow(state, action) ***REMOVED***
      return this.scheduleWithRelativeAndState(state, 0, action);
    ***REMOVED***

    function scheduleRelative(state, dueTime, action) ***REMOVED***
      var dt = this.now() + Scheduler.normalize(dueTime),
          si = new ScheduledItem(this, state, action, dt);

      if (!queue) ***REMOVED***
        queue = new PriorityQueue(4);
        queue.enqueue(si);
        try ***REMOVED***
          runTrampoline(queue);
        ***REMOVED*** catch (e) ***REMOVED***
          throw e;
        ***REMOVED*** finally ***REMOVED***
          queue = null;
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
        queue.enqueue(si);
      ***REMOVED***
      return si.disposable;
    ***REMOVED***

    function scheduleAbsolute(state, dueTime, action) ***REMOVED***
      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
    ***REMOVED***

    var currentScheduler = new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);

    currentScheduler.scheduleRequired = function () ***REMOVED*** return !queue; ***REMOVED***;
    currentScheduler.ensureTrampoline = function (action) ***REMOVED***
      if (!queue) ***REMOVED*** this.schedule(action); ***REMOVED*** else ***REMOVED*** action(); ***REMOVED***
    ***REMOVED***;

    return currentScheduler;
  ***REMOVED***());
