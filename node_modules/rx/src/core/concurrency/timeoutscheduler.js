  var scheduleMethod, clearMethod = noop;
  var localTimer = (function () ***REMOVED***
    var localSetTimeout, localClearTimeout = noop;
    if ('WScript' in this) ***REMOVED***
      localSetTimeout = function (fn, time) ***REMOVED***
        WScript.Sleep(time);
        fn();
      ***REMOVED***;
    ***REMOVED*** else if (!!root.setTimeout) ***REMOVED***
      localSetTimeout = root.setTimeout;
      localClearTimeout = root.clearTimeout;
    ***REMOVED*** else ***REMOVED***
      throw new Error('No concurrency detected!');
    ***REMOVED***

    return ***REMOVED***
      setTimeout: localSetTimeout,
      clearTimeout: localClearTimeout
    ***REMOVED***;
  ***REMOVED***());
  var localSetTimeout = localTimer.setTimeout,
    localClearTimeout = localTimer.clearTimeout;

  (function () ***REMOVED***

    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^$***REMOVED******REMOVED***()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
      !reNative.test(setImmediate) && setImmediate,
      clearImmediate = typeof (clearImmediate = freeGlobal && moduleExports && freeGlobal.clearImmediate) == 'function' &&
      !reNative.test(clearImmediate) && clearImmediate;

    function postMessageSupported () ***REMOVED***
      // Ensure not in a worker
      if (!root.postMessage || root.importScripts) ***REMOVED*** return false; ***REMOVED***
      var isAsync = false,
          oldHandler = root.onmessage;
      // Test for async
      root.onmessage = function () ***REMOVED*** isAsync = true; ***REMOVED***;
      root.postMessage('', '*');
      root.onmessage = oldHandler;

      return isAsync;
    ***REMOVED***

    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
    if (typeof setImmediate === 'function') ***REMOVED***
      scheduleMethod = setImmediate;
      clearMethod = clearImmediate;
    ***REMOVED*** else if (typeof process !== 'undefined' && ***REMOVED******REMOVED***.toString.call(process) === '[object process]') ***REMOVED***
      scheduleMethod = process.nextTick;
    ***REMOVED*** else if (postMessageSupported()) ***REMOVED***
      var MSG_PREFIX = 'ms.rx.schedule' + Math.random(),
        tasks = ***REMOVED******REMOVED***,
        taskId = 0;

      var onGlobalPostMessage = function (event) ***REMOVED***
        // Only if we're a match to avoid any other global events
        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) ***REMOVED***
          var handleId = event.data.substring(MSG_PREFIX.length),
            action = tasks[handleId];
          action();
          delete tasks[handleId];
        ***REMOVED***
      ***REMOVED***

      if (root.addEventListener) ***REMOVED***
        root.addEventListener('message', onGlobalPostMessage, false);
      ***REMOVED*** else ***REMOVED***
        root.attachEvent('onmessage', onGlobalPostMessage, false);
      ***REMOVED***

      scheduleMethod = function (action) ***REMOVED***
        var currentId = taskId++;
        tasks[currentId] = action;
        root.postMessage(MSG_PREFIX + currentId, '*');
      ***REMOVED***;
    ***REMOVED*** else if (!!root.MessageChannel) ***REMOVED***
      var channel = new root.MessageChannel(),
        channelTasks = ***REMOVED******REMOVED***,
        channelTaskId = 0;

      channel.port1.onmessage = function (event) ***REMOVED***
        var id = event.data,
          action = channelTasks[id];
        action();
        delete channelTasks[id];
      ***REMOVED***;

      scheduleMethod = function (action) ***REMOVED***
        var id = channelTaskId++;
        channelTasks[id] = action;
        channel.port2.postMessage(id);
      ***REMOVED***;
    ***REMOVED*** else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) ***REMOVED***

      scheduleMethod = function (action) ***REMOVED***
        var scriptElement = root.document.createElement('script');
        scriptElement.onreadystatechange = function () ***REMOVED***
          action();
          scriptElement.onreadystatechange = null;
          scriptElement.parentNode.removeChild(scriptElement);
          scriptElement = null;
        ***REMOVED***;
        root.document.documentElement.appendChild(scriptElement);
      ***REMOVED***;

    ***REMOVED*** else ***REMOVED***
      scheduleMethod = function (action) ***REMOVED*** return localSetTimeout(action, 0); ***REMOVED***;
      clearMethod = localClearTimeout;
    ***REMOVED***
  ***REMOVED***());

  /**
   * Gets a scheduler that schedules work via a timed callback based upon platform.
   */
  var timeoutScheduler = Scheduler.timeout = (function () ***REMOVED***

    function scheduleNow(state, action) ***REMOVED***
      var scheduler = this,
        disposable = new SingleAssignmentDisposable();
      var id = scheduleMethod(function () ***REMOVED***
        if (!disposable.isDisposed) ***REMOVED***
          disposable.setDisposable(action(scheduler, state));
        ***REMOVED***
      ***REMOVED***);
      return new CompositeDisposable(disposable, disposableCreate(function () ***REMOVED***
        clearMethod(id);
      ***REMOVED***));
    ***REMOVED***

    function scheduleRelative(state, dueTime, action) ***REMOVED***
      var scheduler = this,
        dt = Scheduler.normalize(dueTime);
      if (dt === 0) ***REMOVED***
        return scheduler.scheduleWithState(state, action);
      ***REMOVED***
      var disposable = new SingleAssignmentDisposable();
      var id = localSetTimeout(function () ***REMOVED***
        if (!disposable.isDisposed) ***REMOVED***
          disposable.setDisposable(action(scheduler, state));
        ***REMOVED***
      ***REMOVED***, dt);
      return new CompositeDisposable(disposable, disposableCreate(function () ***REMOVED***
        localClearTimeout(id);
      ***REMOVED***));
    ***REMOVED***

    function scheduleAbsolute(state, dueTime, action) ***REMOVED***
      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
    ***REMOVED***

    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
  ***REMOVED***)();
