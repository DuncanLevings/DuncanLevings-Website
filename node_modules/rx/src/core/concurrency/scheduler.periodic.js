  (function (schedulerProto) ***REMOVED***

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
     * @param ***REMOVED***Number***REMOVED*** period Period for running the work periodically.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled recurring action (best effort).
     */
    Scheduler.prototype.schedulePeriodic = function (period, action) ***REMOVED***
      return this.schedulePeriodicWithState(null, period, action);
    ***REMOVED***;

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
     * @param ***REMOVED***Mixed***REMOVED*** state Initial state passed to the action upon the first iteration.
     * @param ***REMOVED***Number***REMOVED*** period Period for running the work periodically.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed, potentially updating the state.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled recurring action (best effort).
     */
    Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) ***REMOVED***
      if (typeof root.setInterval === 'undefined') ***REMOVED*** throw new Error('Periodic scheduling not supported.'); ***REMOVED***
      var s = state;

      var id = root.setInterval(function () ***REMOVED***
        s = action(s);
      ***REMOVED***, period);

      return disposableCreate(function () ***REMOVED***
        root.clearInterval(id);
      ***REMOVED***);
    ***REMOVED***;

  ***REMOVED***(Scheduler.prototype));
