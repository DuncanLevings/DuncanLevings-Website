  (function (schedulerProto) ***REMOVED***
    function invokeRecImmediate(scheduler, pair) ***REMOVED***
      var state = pair.first, action = pair.second, group = new CompositeDisposable(),
      recursiveAction = function (state1) ***REMOVED***
        action(state1, function (state2) ***REMOVED***
          var isAdded = false, isDone = false,
          d = scheduler.scheduleWithState(state2, function (scheduler1, state3) ***REMOVED***
            if (isAdded) ***REMOVED***
              group.remove(d);
            ***REMOVED*** else ***REMOVED***
              isDone = true;
            ***REMOVED***
            recursiveAction(state3);
            return disposableEmpty;
          ***REMOVED***);
          if (!isDone) ***REMOVED***
            group.add(d);
            isAdded = true;
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***;
      recursiveAction(state);
      return group;
    ***REMOVED***

    function invokeRecDate(scheduler, pair, method) ***REMOVED***
      var state = pair.first, action = pair.second, group = new CompositeDisposable(),
      recursiveAction = function (state1) ***REMOVED***
        action(state1, function (state2, dueTime1) ***REMOVED***
          var isAdded = false, isDone = false,
          d = scheduler[method].call(scheduler, state2, dueTime1, function (scheduler1, state3) ***REMOVED***
            if (isAdded) ***REMOVED***
              group.remove(d);
            ***REMOVED*** else ***REMOVED***
              isDone = true;
            ***REMOVED***
            recursiveAction(state3);
            return disposableEmpty;
          ***REMOVED***);
          if (!isDone) ***REMOVED***
            group.add(d);
            isAdded = true;
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***;
      recursiveAction(state);
      return group;
    ***REMOVED***

    function scheduleInnerRecursive(action, self) ***REMOVED***
      action(function(dt) ***REMOVED*** self(action, dt); ***REMOVED***);
    ***REMOVED***

    /**
     * Schedules an action to be executed recursively.
     * @param ***REMOVED***Function***REMOVED*** action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursive = function (action) ***REMOVED***
      return this.scheduleRecursiveWithState(action, function (_action, self) ***REMOVED***
        _action(function () ***REMOVED*** self(_action); ***REMOVED***); ***REMOVED***);
    ***REMOVED***;

    /**
     * Schedules an action to be executed recursively.
     * @param ***REMOVED***Mixed***REMOVED*** state State passed to the action to be executed.
     * @param ***REMOVED***Function***REMOVED*** action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithState = function (state, action) ***REMOVED***
      return this.scheduleWithState(***REMOVED*** first: state, second: action ***REMOVED***, invokeRecImmediate);
    ***REMOVED***;

    /**
     * Schedules an action to be executed recursively after a specified relative due time.
     * @param ***REMOVED***Function***REMOVED*** action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
     * @param ***REMOVED***Number***REMOVED***dueTime Relative time after which to execute the action for the first time.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) ***REMOVED***
      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
    ***REMOVED***;

    /**
     * Schedules an action to be executed recursively after a specified relative due time.
     * @param ***REMOVED***Mixed***REMOVED*** state State passed to the action to be executed.
     * @param ***REMOVED***Function***REMOVED*** action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
     * @param ***REMOVED***Number***REMOVED***dueTime Relative time after which to execute the action for the first time.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) ***REMOVED***
      return this._scheduleRelative(***REMOVED*** first: state, second: action ***REMOVED***, dueTime, function (s, p) ***REMOVED***
        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
      ***REMOVED***);
    ***REMOVED***;

    /**
     * Schedules an action to be executed recursively at a specified absolute due time.
     * @param ***REMOVED***Function***REMOVED*** action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
     * @param ***REMOVED***Number***REMOVED***dueTime Absolute time at which to execute the action for the first time.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) ***REMOVED***
      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
    ***REMOVED***;

    /**
     * Schedules an action to be executed recursively at a specified absolute due time.
     * @param ***REMOVED***Mixed***REMOVED*** state State passed to the action to be executed.
     * @param ***REMOVED***Function***REMOVED*** action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
     * @param ***REMOVED***Number***REMOVED***dueTime Absolute time at which to execute the action for the first time.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) ***REMOVED***
      return this._scheduleAbsolute(***REMOVED*** first: state, second: action ***REMOVED***, dueTime, function (s, p) ***REMOVED***
        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
      ***REMOVED***);
    ***REMOVED***;
  ***REMOVED***(Scheduler.prototype));
