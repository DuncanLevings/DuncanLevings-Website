  /**
   * Abstract base class for implementations of the Observer class.
   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
   */
  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) ***REMOVED***
    inherits(AbstractObserver, __super__);

    /**
     * Creates a new observer in a non-stopped state.
     */
    function AbstractObserver() ***REMOVED***
      this.isStopped = false;
      __super__.call(this);
    ***REMOVED***

    /**
     * Notifies the observer of a new element in the sequence.
     * @param ***REMOVED***Any***REMOVED*** value Next element in the sequence.
     */
    AbstractObserver.prototype.onNext = function (value) ***REMOVED***
      if (!this.isStopped) ***REMOVED*** this.next(value); ***REMOVED***
    ***REMOVED***;

    /**
     * Notifies the observer that an exception has occurred.
     * @param ***REMOVED***Any***REMOVED*** error The error that has occurred.
     */
    AbstractObserver.prototype.onError = function (error) ***REMOVED***
      if (!this.isStopped) ***REMOVED***
        this.isStopped = true;
        this.error(error);
      ***REMOVED***
    ***REMOVED***;

    /**
     * Notifies the observer of the end of the sequence.
     */
    AbstractObserver.prototype.onCompleted = function () ***REMOVED***
      if (!this.isStopped) ***REMOVED***
        this.isStopped = true;
        this.completed();
      ***REMOVED***
    ***REMOVED***;

    /**
     * Disposes the observer, causing it to transition to the stopped state.
     */
    AbstractObserver.prototype.dispose = function () ***REMOVED***
      this.isStopped = true;
    ***REMOVED***;

    AbstractObserver.prototype.fail = function (e) ***REMOVED***
      if (!this.isStopped) ***REMOVED***
        this.isStopped = true;
        this.error(e);
        return true;
      ***REMOVED***

      return false;
    ***REMOVED***;

    return AbstractObserver;
  ***REMOVED***(Observer));
