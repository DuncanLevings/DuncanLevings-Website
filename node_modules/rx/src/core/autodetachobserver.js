  var AutoDetachObserver = (function (__super__) ***REMOVED***
    inherits(AutoDetachObserver, __super__);

    function AutoDetachObserver(observer) ***REMOVED***
      __super__.call(this);
      this.observer = observer;
      this.m = new SingleAssignmentDisposable();
    ***REMOVED***

    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

    AutoDetachObserverPrototype.next = function (value) ***REMOVED***
      var noError = false;
      try ***REMOVED***
        this.observer.onNext(value);
        noError = true;
      ***REMOVED*** catch (e) ***REMOVED***
        throw e;
      ***REMOVED*** finally ***REMOVED***
        !noError && this.dispose();
      ***REMOVED***
    ***REMOVED***;

    AutoDetachObserverPrototype.error = function (err) ***REMOVED***
      try ***REMOVED***
        this.observer.onError(err);
      ***REMOVED*** catch (e) ***REMOVED***
        throw e;
      ***REMOVED*** finally ***REMOVED***
        this.dispose();
      ***REMOVED***
    ***REMOVED***;

    AutoDetachObserverPrototype.completed = function () ***REMOVED***
      try ***REMOVED***
        this.observer.onCompleted();
      ***REMOVED*** catch (e) ***REMOVED***
        throw e;
      ***REMOVED*** finally ***REMOVED***
        this.dispose();
      ***REMOVED***
    ***REMOVED***;

    AutoDetachObserverPrototype.setDisposable = function (value) ***REMOVED*** this.m.setDisposable(value); ***REMOVED***;
    AutoDetachObserverPrototype.getDisposable = function () ***REMOVED*** return this.m.getDisposable(); ***REMOVED***;

    AutoDetachObserverPrototype.dispose = function () ***REMOVED***
      __super__.prototype.dispose.call(this);
      this.m.dispose();
    ***REMOVED***;

    return AutoDetachObserver;
  ***REMOVED***(AbstractObserver));
