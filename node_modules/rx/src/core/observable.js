  var observableProto;

  /**
   * Represents a push-style collection.
   */
  var Observable = Rx.Observable = (function () ***REMOVED***

    function Observable(subscribe) ***REMOVED***
      if (Rx.config.longStackSupport && hasStacks) ***REMOVED***
        try ***REMOVED***
          throw new Error();
        ***REMOVED*** catch (e) ***REMOVED***
          this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        ***REMOVED***

        var self = this;
        this._subscribe = function (observer) ***REMOVED***
          var oldOnError = observer.onError.bind(observer);

          observer.onError = function (err) ***REMOVED***
            makeStackTraceLong(err, self);
            oldOnError(err);
          ***REMOVED***;

          return subscribe.call(self, observer);
        ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
        this._subscribe = subscribe;
      ***REMOVED***
    ***REMOVED***

    observableProto = Observable.prototype;

    /**
     *  Subscribes an observer to the observable sequence.
     *  @param ***REMOVED***Mixed***REMOVED*** [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
     *  @param ***REMOVED***Function***REMOVED*** [onError] Action to invoke upon exceptional termination of the observable sequence.
     *  @param ***REMOVED***Function***REMOVED*** [onCompleted] Action to invoke upon graceful termination of the observable sequence.
     *  @returns ***REMOVED***Diposable***REMOVED*** A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) ***REMOVED***
      return this._subscribe(typeof observerOrOnNext === 'object' ?
        observerOrOnNext :
        observerCreate(observerOrOnNext, onError, onCompleted));
    ***REMOVED***;

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param ***REMOVED***Function***REMOVED*** onNext The function to invoke on each element in the observable sequence.
     * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
     * @returns ***REMOVED***Disposable***REMOVED*** A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnNext = function (onNext, thisArg) ***REMOVED***
      return this._subscribe(observerCreate(arguments.length === 2 ? function(x) ***REMOVED*** onNext.call(thisArg, x); ***REMOVED*** : onNext));
    ***REMOVED***;

    /**
     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
     * @param ***REMOVED***Function***REMOVED*** onError The function to invoke upon exceptional termination of the observable sequence.
     * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
     * @returns ***REMOVED***Disposable***REMOVED*** A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnError = function (onError, thisArg) ***REMOVED***
      return this._subscribe(observerCreate(null, arguments.length === 2 ? function(e) ***REMOVED*** onError.call(thisArg, e); ***REMOVED*** : onError));
    ***REMOVED***;

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param ***REMOVED***Function***REMOVED*** onCompleted The function to invoke upon graceful termination of the observable sequence.
     * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
     * @returns ***REMOVED***Disposable***REMOVED*** A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) ***REMOVED***
      return this._subscribe(observerCreate(null, null, arguments.length === 2 ? function() ***REMOVED*** onCompleted.call(thisArg); ***REMOVED*** : onCompleted));
    ***REMOVED***;

    return Observable;
  ***REMOVED***)();
