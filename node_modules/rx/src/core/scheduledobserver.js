  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) ***REMOVED***
    inherits(ScheduledObserver, __super__);

    function ScheduledObserver(scheduler, observer) ***REMOVED***
      __super__.call(this);
      this.scheduler = scheduler;
      this.observer = observer;
      this.isAcquired = false;
      this.hasFaulted = false;
      this.queue = [];
      this.disposable = new SerialDisposable();
    ***REMOVED***

    ScheduledObserver.prototype.next = function (value) ***REMOVED***
      var self = this;
      this.queue.push(function () ***REMOVED*** self.observer.onNext(value); ***REMOVED***);
    ***REMOVED***;

    ScheduledObserver.prototype.error = function (e) ***REMOVED***
      var self = this;
      this.queue.push(function () ***REMOVED*** self.observer.onError(e); ***REMOVED***);
    ***REMOVED***;

    ScheduledObserver.prototype.completed = function () ***REMOVED***
      var self = this;
      this.queue.push(function () ***REMOVED*** self.observer.onCompleted(); ***REMOVED***);
    ***REMOVED***;

    ScheduledObserver.prototype.ensureActive = function () ***REMOVED***
      var isOwner = false, parent = this;
      if (!this.hasFaulted && this.queue.length > 0) ***REMOVED***
        isOwner = !this.isAcquired;
        this.isAcquired = true;
      ***REMOVED***
      if (isOwner) ***REMOVED***
        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) ***REMOVED***
          var work;
          if (parent.queue.length > 0) ***REMOVED***
            work = parent.queue.shift();
          ***REMOVED*** else ***REMOVED***
            parent.isAcquired = false;
            return;
          ***REMOVED***
          try ***REMOVED***
            work();
          ***REMOVED*** catch (ex) ***REMOVED***
            parent.queue = [];
            parent.hasFaulted = true;
            throw ex;
          ***REMOVED***
          self();
        ***REMOVED***));
      ***REMOVED***
    ***REMOVED***;

    ScheduledObserver.prototype.dispose = function () ***REMOVED***
      __super__.prototype.dispose.call(this);
      this.disposable.dispose();
    ***REMOVED***;

    return ScheduledObserver;
  ***REMOVED***(AbstractObserver));
