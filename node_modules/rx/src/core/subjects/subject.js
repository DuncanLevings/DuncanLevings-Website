  /**
   *  Represents an object that is both an observable sequence as well as an observer.
   *  Each notification is broadcasted to all subscribed observers.
   */
  var Subject = Rx.Subject = (function (__super__) ***REMOVED***
    function subscribe(observer) ***REMOVED***
      checkDisposed.call(this);
      if (!this.isStopped) ***REMOVED***
        this.observers.push(observer);
        return new InnerSubscription(this, observer);
      ***REMOVED***
      if (this.hasError) ***REMOVED***
        observer.onError(this.error);
        return disposableEmpty;
      ***REMOVED***
      observer.onCompleted();
      return disposableEmpty;
    ***REMOVED***

    inherits(Subject, __super__);

    /**
     * Creates a subject.
     */
    function Subject() ***REMOVED***
      __super__.call(this, subscribe);
      this.isDisposed = false,
      this.isStopped = false,
      this.observers = [];
      this.hasError = false;
    ***REMOVED***

    addProperties(Subject.prototype, Observer.prototype, ***REMOVED***
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns ***REMOVED***Boolean***REMOVED*** Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () ***REMOVED*** return this.observers.length > 0; ***REMOVED***,
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () ***REMOVED***
        checkDisposed.call(this);
        if (!this.isStopped) ***REMOVED***
          var os = this.observers.slice(0);
          this.isStopped = true;
          for (var i = 0, len = os.length; i < len; i++) ***REMOVED***
            os[i].onCompleted();
          ***REMOVED***

          this.observers.length = 0;
        ***REMOVED***
      ***REMOVED***,
      /**
       * Notifies all subscribed observers about the exception.
       * @param ***REMOVED***Mixed***REMOVED*** error The exception to send to all observers.
       */
      onError: function (error) ***REMOVED***
        checkDisposed.call(this);
        if (!this.isStopped) ***REMOVED***
          var os = this.observers.slice(0);
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          for (var i = 0, len = os.length; i < len; i++) ***REMOVED***
            os[i].onError(error);
          ***REMOVED***

          this.observers.length = 0;
        ***REMOVED***
      ***REMOVED***,
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param ***REMOVED***Mixed***REMOVED*** value The value to send to all observers.
       */
      onNext: function (value) ***REMOVED***
        checkDisposed.call(this);
        if (!this.isStopped) ***REMOVED***
          var os = this.observers.slice(0);
          for (var i = 0, len = os.length; i < len; i++) ***REMOVED***
            os[i].onNext(value);
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***,
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () ***REMOVED***
        this.isDisposed = true;
        this.observers = null;
      ***REMOVED***
    ***REMOVED***);

    /**
     * Creates a subject from the specified observer and observable.
     * @param ***REMOVED***Observer***REMOVED*** observer The observer used to send messages to the subject.
     * @param ***REMOVED***Observable***REMOVED*** observable The observable used to subscribe to messages sent from the subject.
     * @returns ***REMOVED***Subject***REMOVED*** Subject implemented using the given observer and observable.
     */
    Subject.create = function (observer, observable) ***REMOVED***
      return new AnonymousSubject(observer, observable);
    ***REMOVED***;

    return Subject;
  ***REMOVED***(Observable));
