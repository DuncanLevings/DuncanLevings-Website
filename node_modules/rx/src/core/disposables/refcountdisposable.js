    /**
     * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
     */
    var RefCountDisposable = Rx.RefCountDisposable = (function () ***REMOVED***

        function InnerDisposable(disposable) ***REMOVED***
            this.disposable = disposable;
            this.disposable.count++;
            this.isInnerDisposed = false;
        ***REMOVED***

        InnerDisposable.prototype.dispose = function () ***REMOVED***
            if (!this.disposable.isDisposed) ***REMOVED***
                if (!this.isInnerDisposed) ***REMOVED***
                    this.isInnerDisposed = true;
                    this.disposable.count--;
                    if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) ***REMOVED***
                        this.disposable.isDisposed = true;
                        this.disposable.underlyingDisposable.dispose();
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

        /**
         * Initializes a new instance of the RefCountDisposable with the specified disposable.
         * @constructor
         * @param ***REMOVED***Disposable***REMOVED*** disposable Underlying disposable.
          */
        function RefCountDisposable(disposable) ***REMOVED***
            this.underlyingDisposable = disposable;
            this.isDisposed = false;
            this.isPrimaryDisposed = false;
            this.count = 0;
        ***REMOVED***

        /**
         * Disposes the underlying disposable only when all dependent disposables have been disposed
         */
        RefCountDisposable.prototype.dispose = function () ***REMOVED***
            if (!this.isDisposed) ***REMOVED***
                if (!this.isPrimaryDisposed) ***REMOVED***
                    this.isPrimaryDisposed = true;
                    if (this.count === 0) ***REMOVED***
                        this.isDisposed = true;
                        this.underlyingDisposable.dispose();
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***;

        /**
         * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
         * @returns ***REMOVED***Disposable***REMOVED*** A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
         */
        RefCountDisposable.prototype.getDisposable = function () ***REMOVED***
            return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
        ***REMOVED***;

        return RefCountDisposable;
    ***REMOVED***)();
