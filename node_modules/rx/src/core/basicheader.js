  // Defaults
  var noop = Rx.helpers.noop = function () ***REMOVED*** ***REMOVED***,
    notDefined = Rx.helpers.notDefined = function (x) ***REMOVED*** return typeof x === 'undefined'; ***REMOVED***,
    isScheduler = Rx.helpers.isScheduler = function (x) ***REMOVED*** return x instanceof Rx.Scheduler; ***REMOVED***,
    identity = Rx.helpers.identity = function (x) ***REMOVED*** return x; ***REMOVED***,
    pluck = Rx.helpers.pluck = function (property) ***REMOVED*** return function (x) ***REMOVED*** return x[property]; ***REMOVED***; ***REMOVED***,
    just = Rx.helpers.just = function (value) ***REMOVED*** return function () ***REMOVED*** return value; ***REMOVED***; ***REMOVED***,
    defaultNow = Rx.helpers.defaultNow = (function () ***REMOVED*** return !!Date.now ? Date.now : function () ***REMOVED*** return +new Date; ***REMOVED***; ***REMOVED***()),
    defaultComparer = Rx.helpers.defaultComparer = function (x, y) ***REMOVED*** return isEqual(x, y); ***REMOVED***,
    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) ***REMOVED*** return x > y ? 1 : (x < y ? -1 : 0); ***REMOVED***,
    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) ***REMOVED*** return x.toString(); ***REMOVED***,
    defaultError = Rx.helpers.defaultError = function (err) ***REMOVED*** throw err; ***REMOVED***,
    isPromise = Rx.helpers.isPromise = function (p) ***REMOVED*** return !!p && typeof p.then === 'function'; ***REMOVED***,
    asArray = Rx.helpers.asArray = function () ***REMOVED*** return Array.prototype.slice.call(arguments); ***REMOVED***,
    not = Rx.helpers.not = function (a) ***REMOVED*** return !a; ***REMOVED***,
    isFunction = Rx.helpers.isFunction = (function () ***REMOVED***

      var isFn = function (value) ***REMOVED***
        return typeof value == 'function' || false;
      ***REMOVED***

      // fallback for older versions of Chrome and Safari
      if (isFn(/x/)) ***REMOVED***
        isFn = function(value) ***REMOVED***
          return typeof value == 'function' && toString.call(value) == '[object Function]';
        ***REMOVED***;
      ***REMOVED***

      return isFn;
    ***REMOVED***());

  // Errors
  var sequenceContainsNoElements = 'Sequence contains no elements.';
  var argumentOutOfRange = 'Argument out of range';
  var objectDisposed = 'Object has been disposed';
  function checkDisposed() ***REMOVED*** if (this.isDisposed) ***REMOVED*** throw new Error(objectDisposed); ***REMOVED*** ***REMOVED***
