  /**
   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
   * @example
   *  var res = source.scan(function (acc, x) ***REMOVED*** return acc + x; ***REMOVED***);
   *  var res = source.scan(0, function (acc, x) ***REMOVED*** return acc + x; ***REMOVED***);
   * @param ***REMOVED***Mixed***REMOVED*** [seed] The initial accumulator value.
   * @param ***REMOVED***Function***REMOVED*** accumulator An accumulator function to be invoked on each element.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing the accumulated values.
   */
  observableProto.scan = function () ***REMOVED***
    var hasSeed = false, seed, accumulator, source = this;
    if (arguments.length === 2) ***REMOVED***
      hasSeed = true;
      seed = arguments[0];
      accumulator = arguments[1];
    ***REMOVED*** else ***REMOVED***
      accumulator = arguments[0];
    ***REMOVED***
    return new AnonymousObservable(function (o) ***REMOVED***
      var hasAccumulation, accumulation, hasValue;
      return source.subscribe (
        function (x) ***REMOVED***
          !hasValue && (hasValue = true);
          try ***REMOVED***
            if (hasAccumulation) ***REMOVED***
              accumulation = accumulator(accumulation, x);
            ***REMOVED*** else ***REMOVED***
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            ***REMOVED***
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***

          o.onNext(accumulation);
        ***REMOVED***,
        function (e) ***REMOVED*** o.onError(e); ***REMOVED***,
        function () ***REMOVED***
          !hasValue && hasSeed && o.onNext(seed);
          o.onCompleted();
        ***REMOVED***
      );
    ***REMOVED***, source);
  ***REMOVED***;
