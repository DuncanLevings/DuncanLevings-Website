  /**
   * Projects each element of an observable sequence into a new form by incorporating the element's index.
   * @param ***REMOVED***Function***REMOVED*** selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence whose elements are the result of invoking the transform function on each element of source.
   */
  observableProto.select = observableProto.map = function (selector, thisArg) ***REMOVED***
    var selectorFn = isFunction(selector) ? bindCallback(selector, thisArg, 3) : function () ***REMOVED*** return selector; ***REMOVED***,
        source = this;
    return new AnonymousObservable(function (o) ***REMOVED***
      var count = 0;
      return source.subscribe(function (value) ***REMOVED***
        try ***REMOVED***
          var result = selectorFn(value, count++, source);
        ***REMOVED*** catch (e) ***REMOVED***
          o.onError(e);
          return;
        ***REMOVED***
        o.onNext(result);
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
