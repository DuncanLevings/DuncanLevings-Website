  function observableOf (scheduler, array) ***REMOVED***
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new AnonymousObservable(function (observer) ***REMOVED***
      var count = 0, len = array.length;
      return scheduler.scheduleRecursive(function (self) ***REMOVED***
        if (count < len) ***REMOVED***
          observer.onNext(array[count++]);
          self();
        ***REMOVED*** else ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***

  /**
   *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
   * @returns ***REMOVED***Observable***REMOVED*** The observable sequence whose elements are pulled from the given arguments.
   */
  Observable.of = function () ***REMOVED***
    return observableOf(null, arguments);
  ***REMOVED***;

  /**
   *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
   * @param ***REMOVED***Scheduler***REMOVED*** scheduler A scheduler to use for scheduling the arguments.
   * @returns ***REMOVED***Observable***REMOVED*** The observable sequence whose elements are pulled from the given arguments.
   */
  Observable.ofWithScheduler = function (scheduler) ***REMOVED***
    return observableOf(scheduler, slice.call(arguments, 1));
  ***REMOVED***;
