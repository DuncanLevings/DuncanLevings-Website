   /**
   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.

   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
   *  callbacks on a scheduler, use observeOn.

   *  @param ***REMOVED***Scheduler***REMOVED*** scheduler Scheduler to perform subscription and unsubscription actions on.
   *  @returns ***REMOVED***Observable***REMOVED*** The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
   */
  observableProto.subscribeOn = function (scheduler) ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (observer) ***REMOVED***
      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
      d.setDisposable(m);
      m.setDisposable(scheduler.schedule(function () ***REMOVED***
        d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
      ***REMOVED***));
      return d;
    ***REMOVED***, source);
  ***REMOVED***;
