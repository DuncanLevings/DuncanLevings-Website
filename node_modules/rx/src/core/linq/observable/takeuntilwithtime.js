  /**
   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
   * @param ***REMOVED***Number | Date***REMOVED*** endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler] Scheduler to run the timer on.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence with the elements taken until the specified end time.
   */
  observableProto.takeUntilWithTime = function (endTime, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var source = this, schedulerMethod = endTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';
    return new AnonymousObservable(function (o) ***REMOVED***
      return new CompositeDisposable(
        scheduler[schedulerMethod](endTime, function () ***REMOVED*** o.onCompleted(); ***REMOVED***),
        source.subscribe(o));
    ***REMOVED***, source);
  ***REMOVED***;
