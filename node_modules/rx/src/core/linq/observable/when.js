  /**
   *  Joins together the results from several patterns.
   *
   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
   *  @returns ***REMOVED***Observable***REMOVED*** Observable sequence with the results form matching several patterns.
   */
  Observable.when = function () ***REMOVED***
    var plans = argsOrArray(arguments, 0);
    return new AnonymousObservable(function (observer) ***REMOVED***
      var activePlans = [],
          externalSubscriptions = new Map();
      var outObserver = observerCreate(
        observer.onNext.bind(observer),
        function (err) ***REMOVED***
          externalSubscriptions.forEach(function (v) ***REMOVED*** v.onError(err); ***REMOVED***);
          observer.onError(err);
        ***REMOVED***,
        observer.onCompleted.bind(observer)
      );
      try ***REMOVED***
        for (var i = 0, len = plans.length; i < len; i++) ***REMOVED***
          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) ***REMOVED***
            var idx = activePlans.indexOf(activePlan);
            activePlans.splice(idx, 1);
            activePlans.length === 0 && observer.onCompleted();
          ***REMOVED***));
        ***REMOVED***
      ***REMOVED*** catch (e) ***REMOVED***
        observableThrow(e).subscribe(observer);
      ***REMOVED***
      var group = new CompositeDisposable();
      externalSubscriptions.forEach(function (joinObserver) ***REMOVED***
        joinObserver.subscribe();
        group.add(joinObserver);
      ***REMOVED***);

      return group;
    ***REMOVED***);
  ***REMOVED***;
