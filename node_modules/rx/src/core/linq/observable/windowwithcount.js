  /**
   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
   *
   *  var res = xs.windowWithCount(10);
   *  var res = xs.windowWithCount(10, 1);
   * @param ***REMOVED***Number***REMOVED*** count Length of each window.
   * @param ***REMOVED***Number***REMOVED*** [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence of windows.
   */
  observableProto.windowWithCount = function (count, skip) ***REMOVED***
    var source = this;
    +count || (count = 0);
    Math.abs(count) === Infinity && (count = 0);
    if (count <= 0) ***REMOVED*** throw new Error(argumentOutOfRange); ***REMOVED***
    skip == null && (skip = count);
    +skip || (skip = 0);
    Math.abs(skip) === Infinity && (skip = 0);

    if (skip <= 0) ***REMOVED*** throw new Error(argumentOutOfRange); ***REMOVED***
    return new AnonymousObservable(function (observer) ***REMOVED***
      var m = new SingleAssignmentDisposable(),
        refCountDisposable = new RefCountDisposable(m),
        n = 0,
        q = [];

      function createWindow () ***REMOVED***
        var s = new Subject();
        q.push(s);
        observer.onNext(addRef(s, refCountDisposable));
      ***REMOVED***

      createWindow();

      m.setDisposable(source.subscribe(
        function (x) ***REMOVED***
          for (var i = 0, len = q.length; i < len; i++) ***REMOVED*** q[i].onNext(x); ***REMOVED***
          var c = n - count + 1;
          c >= 0 && c % skip === 0 && q.shift().onCompleted();
          ++n % skip === 0 && createWindow();
        ***REMOVED***,
        function (e) ***REMOVED***
          while (q.length > 0) ***REMOVED*** q.shift().onError(e); ***REMOVED***
          observer.onError(e);
        ***REMOVED***,
        function () ***REMOVED***
          while (q.length > 0) ***REMOVED*** q.shift().onCompleted(); ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ));
      return refCountDisposable;
    ***REMOVED***, source);
  ***REMOVED***;
