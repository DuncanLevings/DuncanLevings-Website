  /**
   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
   * @param ***REMOVED***Function***REMOVED*** [predicate] A function to test each element for a condition.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
   */
  observableProto.some = function (predicate, thisArg) ***REMOVED***
    var source = this;
    return predicate ?
      source.filter(predicate, thisArg).some() :
      new AnonymousObservable(function (observer) ***REMOVED***
        return source.subscribe(function () ***REMOVED***
          observer.onNext(true);
          observer.onCompleted();
        ***REMOVED***, function (e) ***REMOVED*** observer.onError(e); ***REMOVED***, function () ***REMOVED***
          observer.onNext(false);
          observer.onCompleted();
        ***REMOVED***);
      ***REMOVED***, source);
  ***REMOVED***;

  /** @deprecated use #some instead */
  observableProto.any = function () ***REMOVED***
    //deprecate('any', 'some');
    return this.some.apply(this, arguments);
  ***REMOVED***;
