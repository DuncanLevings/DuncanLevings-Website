  /**
   * Executes a transducer to transform the observable sequence
   * @param ***REMOVED***Transducer***REMOVED*** transducer A transducer to execute
   * @returns ***REMOVED***Observable***REMOVED*** An Observable sequence containing the results from the transducer.
   */
  observableProto.transduce = function(transducer) ***REMOVED***
    var source = this;

    function transformForObserver(observer) ***REMOVED***
      return ***REMOVED***
        init: function() ***REMOVED***
          return observer;
        ***REMOVED***,
        step: function(obs, input) ***REMOVED***
          return obs.onNext(input);
        ***REMOVED***,
        result: function(obs) ***REMOVED***
          return obs.onCompleted();
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED***

    return new AnonymousObservable(function(observer) ***REMOVED***
      var xform = transducer(transformForObserver(observer));
      return source.subscribe(
        function(v) ***REMOVED***
          try ***REMOVED***
            xform.step(observer, v);
          ***REMOVED*** catch (e) ***REMOVED***
            observer.onError(e);
          ***REMOVED***
        ***REMOVED***,
        observer.onError.bind(observer),
        function() ***REMOVED*** xform.result(observer); ***REMOVED***
      );
    ***REMOVED***, source);
  ***REMOVED***;
