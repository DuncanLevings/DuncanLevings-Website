   /**
   *  Runs two observable sequences in parallel and combines their last elemenets.
   *
   * @param ***REMOVED***Observable***REMOVED*** second Second observable sequence.
   * @param ***REMOVED***Function***REMOVED*** resultSelector Result selector function to invoke with the last elements of both sequences.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence with the result of calling the selector function with the last elements of both input sequences.
   */
  observableProto.forkJoin = function (second, resultSelector) ***REMOVED***
    var first = this;

    return new AnonymousObservable(function (observer) ***REMOVED***
      var leftStopped = false, rightStopped = false,
        hasLeft = false, hasRight = false,
        lastLeft, lastRight,
        leftSubscription = new SingleAssignmentDisposable(), rightSubscription = new SingleAssignmentDisposable();

      isPromise(second) && (second = observableFromPromise(second));

      leftSubscription.setDisposable(
          first.subscribe(function (left) ***REMOVED***
            hasLeft = true;
            lastLeft = left;
          ***REMOVED***, function (err) ***REMOVED***
            rightSubscription.dispose();
            observer.onError(err);
          ***REMOVED***, function () ***REMOVED***
            leftStopped = true;
            if (rightStopped) ***REMOVED***
              if (!hasLeft) ***REMOVED***
                  observer.onCompleted();
              ***REMOVED*** else if (!hasRight) ***REMOVED***
                  observer.onCompleted();
              ***REMOVED*** else ***REMOVED***
                var result;
                try ***REMOVED***
                  result = resultSelector(lastLeft, lastRight);
                ***REMOVED*** catch (e) ***REMOVED***
                  observer.onError(e);
                  return;
                ***REMOVED***
                observer.onNext(result);
                observer.onCompleted();
              ***REMOVED***
            ***REMOVED***
          ***REMOVED***)
      );

      rightSubscription.setDisposable(
        second.subscribe(function (right) ***REMOVED***
          hasRight = true;
          lastRight = right;
        ***REMOVED***, function (err) ***REMOVED***
          leftSubscription.dispose();
          observer.onError(err);
        ***REMOVED***, function () ***REMOVED***
          rightStopped = true;
          if (leftStopped) ***REMOVED***
            if (!hasLeft) ***REMOVED***
              observer.onCompleted();
            ***REMOVED*** else if (!hasRight) ***REMOVED***
              observer.onCompleted();
            ***REMOVED*** else ***REMOVED***
              var result;
              try ***REMOVED***
                result = resultSelector(lastLeft, lastRight);
              ***REMOVED*** catch (e) ***REMOVED***
                observer.onError(e);
                return;
              ***REMOVED***
              observer.onNext(result);
              observer.onCompleted();
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***)
      );

      return new CompositeDisposable(leftSubscription, rightSubscription);
    ***REMOVED***, first);
  ***REMOVED***;
