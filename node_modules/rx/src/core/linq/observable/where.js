  /**
   *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
   *
   * @example
   *  var res = source.where(function (value) ***REMOVED*** return value < 10; ***REMOVED***);
   *  var res = source.where(function (value, index) ***REMOVED*** return value < 10 || index < 10; ***REMOVED***);
   * @param ***REMOVED***Function***REMOVED*** predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that contains elements from the input sequence that satisfy the condition.
   */
  observableProto.where = observableProto.filter = function (predicate, thisArg) ***REMOVED***
    var source = this;
    predicate = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) ***REMOVED***
      var count = 0;
      return source.subscribe(function (value) ***REMOVED***
        try ***REMOVED***
          var shouldRun = predicate(value, count++, source);
        ***REMOVED*** catch (e) ***REMOVED***
          o.onError(e);
          return;
        ***REMOVED***
        shouldRun && o.onNext(value);
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
