  /**
   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
   *  The element's index is used in the logic of the predicate function.
   *
   *  var res = source.skipWhile(function (value) ***REMOVED*** return value < 10; ***REMOVED***);
   *  var res = source.skipWhile(function (value, index) ***REMOVED*** return value < 10 || index < 10; ***REMOVED***);
   * @param ***REMOVED***Function***REMOVED*** predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
   */
  observableProto.skipWhile = function (predicate, thisArg) ***REMOVED***
    var source = this,
        callback = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) ***REMOVED***
      var i = 0, running = false;
      return source.subscribe(function (x) ***REMOVED***
        if (!running) ***REMOVED***
          try ***REMOVED***
            running = !callback(x, i++, source);
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***
        ***REMOVED***
        running && o.onNext(x);
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
