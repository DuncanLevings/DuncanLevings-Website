  /**
   * Merges all the observable sequences into a single observable sequence.
   * The scheduler is optional and if not specified, the immediate scheduler is used.
   * @returns ***REMOVED***Observable***REMOVED*** The observable sequence that merges the elements of the observable sequences.
   */
  var observableMerge = Observable.merge = function () ***REMOVED***
    var scheduler, sources;
    if (!arguments[0]) ***REMOVED***
      scheduler = immediateScheduler;
      sources = slice.call(arguments, 1);
    ***REMOVED*** else if (isScheduler(arguments[0])) ***REMOVED***
      scheduler = arguments[0];
      sources = slice.call(arguments, 1);
    ***REMOVED*** else ***REMOVED***
      scheduler = immediateScheduler;
      sources = slice.call(arguments, 0);
    ***REMOVED***
    if (Array.isArray(sources[0])) ***REMOVED***
      sources = sources[0];
    ***REMOVED***
    return observableOf(scheduler, sources).mergeAll();
  ***REMOVED***;
