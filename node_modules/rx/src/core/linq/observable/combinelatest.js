  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   *
   * @example
   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) ***REMOVED*** return o1 + o2 + o3; ***REMOVED***);
   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) ***REMOVED*** return o1 + o2 + o3; ***REMOVED***);
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  var combineLatest = Observable.combineLatest = function () ***REMOVED***
    var args = slice.call(arguments), resultSelector = args.pop();

    if (Array.isArray(args[0])) ***REMOVED***
      args = args[0];
    ***REMOVED***

    return new AnonymousObservable(function (observer) ***REMOVED***
      var falseFactory = function () ***REMOVED*** return false; ***REMOVED***,
        n = args.length,
        hasValue = arrayInitialize(n, falseFactory),
        hasValueAll = false,
        isDone = arrayInitialize(n, falseFactory),
        values = new Array(n);

      function next(i) ***REMOVED***
        var res;
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) ***REMOVED***
          try ***REMOVED***
            res = resultSelector.apply(null, values);
          ***REMOVED*** catch (ex) ***REMOVED***
            observer.onError(ex);
            return;
          ***REMOVED***
          observer.onNext(res);
        ***REMOVED*** else if (isDone.filter(function (x, j) ***REMOVED*** return j !== i; ***REMOVED***).every(identity)) ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***

      function done (i) ***REMOVED***
        isDone[i] = true;
        if (isDone.every(identity)) ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***

      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) ***REMOVED***
        (function (i) ***REMOVED***
          var source = args[i], sad = new SingleAssignmentDisposable();
          isPromise(source) && (source = observableFromPromise(source));
          sad.setDisposable(source.subscribe(function (x) ***REMOVED***
              values[i] = x;
              next(i);
            ***REMOVED***,
            function(e) ***REMOVED*** observer.onError(e); ***REMOVED***,
            function () ***REMOVED*** done(i); ***REMOVED***
          ));
          subscriptions[i] = sad;
        ***REMOVED***(idx));
      ***REMOVED***

      return new CompositeDisposable(subscriptions);
    ***REMOVED***, this);
  ***REMOVED***;
