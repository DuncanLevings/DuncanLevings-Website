  /**
   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
   * @param ***REMOVED***Observable***REMOVED*** second Second observable sequence used to produce results after the first sequence terminates.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
   */
  observableProto.onErrorResumeNext = function (second) ***REMOVED***
    if (!second) ***REMOVED*** throw new Error('Second observable is required'); ***REMOVED***
    return onErrorResumeNext([this, second]);
  ***REMOVED***;
