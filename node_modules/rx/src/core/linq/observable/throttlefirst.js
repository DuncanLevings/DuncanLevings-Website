  /**
   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
   * @param ***REMOVED***Number***REMOVED*** windowDuration time to wait before emitting another item after emitting the last item
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
   * @returns ***REMOVED***Observable***REMOVED*** An Observable that performs the throttle operation.
   */
  observableProto.throttleFirst = function (windowDuration, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var duration = +windowDuration || 0;
    if (duration <= 0) ***REMOVED*** throw new RangeError('windowDuration cannot be less or equal zero.'); ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (o) ***REMOVED***
      var lastOnNext = 0;
      return source.subscribe(
        function (x) ***REMOVED***
          var now = scheduler.now();
          if (lastOnNext === 0 || now - lastOnNext >= duration) ***REMOVED***
            lastOnNext = now;
            o.onNext(x);
          ***REMOVED***
        ***REMOVED***,function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***
      );
    ***REMOVED***, source);
  ***REMOVED***;
