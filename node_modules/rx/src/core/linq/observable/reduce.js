  /**
   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
   * For aggregation behavior with incremental intermediate results, see Observable.scan.
   * @param ***REMOVED***Function***REMOVED*** accumulator An accumulator function to be invoked on each element.
   * @param ***REMOVED***Any***REMOVED*** [seed] The initial accumulator value.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing a single element with the final accumulator value.
   */
  observableProto.reduce = function (accumulator) ***REMOVED***
    var hasSeed = false, seed, source = this;
    if (arguments.length === 2) ***REMOVED***
      hasSeed = true;
      seed = arguments[1];
    ***REMOVED***
    return new AnonymousObservable(function (o) ***REMOVED***
      var hasAccumulation, accumulation, hasValue;
      return source.subscribe (
        function (x) ***REMOVED***
          !hasValue && (hasValue = true);
          try ***REMOVED***
            if (hasAccumulation) ***REMOVED***
              accumulation = accumulator(accumulation, x);
            ***REMOVED*** else ***REMOVED***
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            ***REMOVED***
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***
        ***REMOVED***,
        function (e) ***REMOVED*** o.onError(e); ***REMOVED***,
        function () ***REMOVED***
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new Error(sequenceContainsNoElements));
          o.onCompleted();
        ***REMOVED***
      );
    ***REMOVED***, source);
  ***REMOVED***;
