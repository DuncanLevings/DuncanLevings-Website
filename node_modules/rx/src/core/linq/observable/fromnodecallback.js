  /**
   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
   * @param ***REMOVED***Function***REMOVED*** func The function to call
   * @param ***REMOVED***Mixed***REMOVED*** [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @param ***REMOVED***Function***REMOVED*** [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
   * @returns ***REMOVED***Function***REMOVED*** An async function which when applied, returns an observable sequence with the callback arguments as an array.
   */
  Observable.fromNodeCallback = function (func, context, selector) ***REMOVED***
    return function () ***REMOVED***
      var args = slice.call(arguments, 0);

      return new AnonymousObservable(function (observer) ***REMOVED***
        function handler(err) ***REMOVED***
          if (err) ***REMOVED***
            observer.onError(err);
            return;
          ***REMOVED***

          var results = slice.call(arguments, 1);

          if (selector) ***REMOVED***
            try ***REMOVED***
              results = selector(results);
            ***REMOVED*** catch (e) ***REMOVED***
              observer.onError(e);
              return;
            ***REMOVED***
            observer.onNext(results);
          ***REMOVED*** else ***REMOVED***
            if (results.length <= 1) ***REMOVED***
              observer.onNext.apply(observer, results);
            ***REMOVED*** else ***REMOVED***
              observer.onNext(results);
            ***REMOVED***
          ***REMOVED***

          observer.onCompleted();
        ***REMOVED***

        args.push(handler);
        func.apply(context, args);
      ***REMOVED***).publishLast().refCount();
    ***REMOVED***;
  ***REMOVED***;
