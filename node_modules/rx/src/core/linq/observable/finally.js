  /**
   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
   * @param ***REMOVED***Function***REMOVED*** finallyAction Action to invoke after the source observable sequence terminates.
   * @returns ***REMOVED***Observable***REMOVED*** Source sequence with the action-invoking termination behavior applied.
   */
  observableProto['finally'] = observableProto.ensure = function (action) ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (observer) ***REMOVED***
      var subscription;
      try ***REMOVED***
        subscription = source.subscribe(observer);
      ***REMOVED*** catch (e) ***REMOVED***
        action();
        throw e;
      ***REMOVED***
      return disposableCreate(function () ***REMOVED***
        try ***REMOVED***
          subscription.dispose();
        ***REMOVED*** catch (e) ***REMOVED***
          throw e;
        ***REMOVED*** finally ***REMOVED***
          action();
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***, this);
  ***REMOVED***;

  /**
   * @deprecated use #finally or #ensure instead.
   */
  observableProto.finallyAction = function (action) ***REMOVED***
    //deprecate('finallyAction', 'finally or ensure');
    return this.ensure(action);
  ***REMOVED***;
