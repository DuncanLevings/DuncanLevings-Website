  /**
   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
   * @param ***REMOVED***Function***REMOVED*** function Function to convert to an asynchronous function.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
   * @param ***REMOVED***Mixed***REMOVED*** [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @returns ***REMOVED***Function***REMOVED*** Asynchronous function.
   */
  var observableToAsync = Observable.toAsync = function (func, context, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return function () ***REMOVED***
      var args = arguments,
        subject = new AsyncSubject();

      scheduler.schedule(function () ***REMOVED***
        var result;
        try ***REMOVED***
          result = func.apply(context, args);
        ***REMOVED*** catch (e) ***REMOVED***
          subject.onError(e);
          return;
        ***REMOVED***
        subject.onNext(result);
        subject.onCompleted();
      ***REMOVED***);
      return subject.asObservable();
    ***REMOVED***;
  ***REMOVED***;
