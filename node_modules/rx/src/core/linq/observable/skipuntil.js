  /**
   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
   * @param ***REMOVED***Observable | Promise***REMOVED*** other The observable sequence or Promise that triggers propagation of elements of the source sequence.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
   */
  observableProto.skipUntil = function (other) ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (o) ***REMOVED***
      var isOpen = false;
      var disposables = new CompositeDisposable(source.subscribe(function (left) ***REMOVED***
        isOpen && o.onNext(left);
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED***
        isOpen && o.onCompleted();
      ***REMOVED***));

      isPromise(other) && (other = observableFromPromise(other));

      var rightSubscription = new SingleAssignmentDisposable();
      disposables.add(rightSubscription);
      rightSubscription.setDisposable(other.subscribe(function () ***REMOVED***
        isOpen = true;
        rightSubscription.dispose();
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED***
        rightSubscription.dispose();
      ***REMOVED***));

      return disposables;
    ***REMOVED***, source);
  ***REMOVED***;
