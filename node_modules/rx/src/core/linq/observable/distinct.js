  // Swap out for Array.findIndex
  function arrayIndexOfComparer(array, item, comparer) ***REMOVED***
    for (var i = 0, len = array.length; i < len; i++) ***REMOVED***
      if (comparer(array[i], item)) ***REMOVED*** return i; ***REMOVED***
    ***REMOVED***
    return -1;
  ***REMOVED***

  function HashSet(comparer) ***REMOVED***
    this.comparer = comparer;
    this.set = [];
  ***REMOVED***
  HashSet.prototype.push = function(value) ***REMOVED***
    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
    retValue && this.set.push(value);
    return retValue;
  ***REMOVED***;

  /**
   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
   *
   * @example
   *  var res = obs = xs.distinct();
   *  2 - obs = xs.distinct(function (x) ***REMOVED*** return x.id; ***REMOVED***);
   *  2 - obs = xs.distinct(function (x) ***REMOVED*** return x.id; ***REMOVED***, function (a,b) ***REMOVED*** return a === b; ***REMOVED***);
   * @param ***REMOVED***Function***REMOVED*** [keySelector]  A function to compute the comparison key for each element.
   * @param ***REMOVED***Function***REMOVED*** [comparer]  Used to compare items in the collection.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
   */
  observableProto.distinct = function (keySelector, comparer) ***REMOVED***
    var source = this;
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) ***REMOVED***
      var hashSet = new HashSet(comparer);
      return source.subscribe(function (x) ***REMOVED***
        var key = x;

        if (keySelector) ***REMOVED***
          try ***REMOVED***
            key = keySelector(x);
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***
        ***REMOVED***
        hashSet.push(key) && o.onNext(x);
      ***REMOVED***,
      function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, this);
  ***REMOVED***;
