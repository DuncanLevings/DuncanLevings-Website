  /**
   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
   *
   * @example
   *  1 - res = source.delayWithSelector(function (x) ***REMOVED*** return Rx.Scheduler.timer(5000); ***REMOVED***); // with selector only
   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) ***REMOVED*** return Rx.Observable.timer(x); ***REMOVED***); // with delay and selector
   *
   * @param ***REMOVED***Observable***REMOVED*** [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
   * @param ***REMOVED***Function***REMOVED*** delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
   * @returns ***REMOVED***Observable***REMOVED*** Time-shifted sequence.
   */
  observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) ***REMOVED***
      var source = this, subDelay, selector;
      if (typeof subscriptionDelay === 'function') ***REMOVED***
        selector = subscriptionDelay;
      ***REMOVED*** else ***REMOVED***
        subDelay = subscriptionDelay;
        selector = delayDurationSelector;
      ***REMOVED***
      return new AnonymousObservable(function (observer) ***REMOVED***
        var delays = new CompositeDisposable(), atEnd = false, done = function () ***REMOVED***
            if (atEnd && delays.length === 0) ***REMOVED*** observer.onCompleted(); ***REMOVED***
        ***REMOVED***, subscription = new SerialDisposable(), start = function () ***REMOVED***
          subscription.setDisposable(source.subscribe(function (x) ***REMOVED***
              var delay;
              try ***REMOVED***
                delay = selector(x);
              ***REMOVED*** catch (error) ***REMOVED***
                observer.onError(error);
                return;
              ***REMOVED***
              var d = new SingleAssignmentDisposable();
              delays.add(d);
              d.setDisposable(delay.subscribe(function () ***REMOVED***
                observer.onNext(x);
                delays.remove(d);
                done();
              ***REMOVED***, observer.onError.bind(observer), function () ***REMOVED***
                observer.onNext(x);
                delays.remove(d);
                done();
              ***REMOVED***));
          ***REMOVED***, observer.onError.bind(observer), function () ***REMOVED***
            atEnd = true;
            subscription.dispose();
            done();
          ***REMOVED***));
      ***REMOVED***;

      if (!subDelay) ***REMOVED***
        start();
      ***REMOVED*** else ***REMOVED***
        subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
      ***REMOVED***

      return new CompositeDisposable(subscription, delays);
    ***REMOVED***, this);
  ***REMOVED***;
