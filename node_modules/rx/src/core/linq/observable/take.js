  /**
   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
   *
   *  var res = source.take(5);
   *  var res = source.take(0, Rx.Scheduler.timeout);
   * @param ***REMOVED***Number***REMOVED*** count The number of elements to return.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that contains the specified number of elements from the start of the input sequence.
   */
  observableProto.take = function (count, scheduler) ***REMOVED***
    if (count < 0) ***REMOVED*** throw new RangeError(argumentOutOfRange); ***REMOVED***
    if (count === 0) ***REMOVED*** return observableEmpty(scheduler); ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (o) ***REMOVED***
      var remaining = count;
      return source.subscribe(function (x) ***REMOVED***
        if (remaining-- > 0) ***REMOVED***
          o.onNext(x);
          remaining === 0 && o.onCompleted();
        ***REMOVED***
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
