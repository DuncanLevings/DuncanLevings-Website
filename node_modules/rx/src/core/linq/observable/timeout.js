  /**
   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
   * @param ***REMOVED***Number***REMOVED*** dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
   * @param ***REMOVED***Observable***REMOVED*** [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
   * @returns ***REMOVED***Observable***REMOVED*** The source sequence switching to the other sequence in case of a timeout.
   */
  observableProto.timeout = function (dueTime, other, scheduler) ***REMOVED***
    (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
    isScheduler(scheduler) || (scheduler = timeoutScheduler);

    var source = this, schedulerMethod = dueTime instanceof Date ?
      'scheduleWithAbsolute' :
      'scheduleWithRelative';

    return new AnonymousObservable(function (observer) ***REMOVED***
      var id = 0,
        original = new SingleAssignmentDisposable(),
        subscription = new SerialDisposable(),
        switched = false,
        timer = new SerialDisposable();

      subscription.setDisposable(original);

      function createTimer() ***REMOVED***
        var myId = id;
        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () ***REMOVED***
          if (id === myId) ***REMOVED***
            isPromise(other) && (other = observableFromPromise(other));
            subscription.setDisposable(other.subscribe(observer));
          ***REMOVED***
        ***REMOVED***));
      ***REMOVED***

      createTimer();

      original.setDisposable(source.subscribe(function (x) ***REMOVED***
        if (!switched) ***REMOVED***
          id++;
          observer.onNext(x);
          createTimer();
        ***REMOVED***
      ***REMOVED***, function (e) ***REMOVED***
        if (!switched) ***REMOVED***
          id++;
          observer.onError(e);
        ***REMOVED***
      ***REMOVED***, function () ***REMOVED***
        if (!switched) ***REMOVED***
          id++;
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***));
      return new CompositeDisposable(subscription, timer);
    ***REMOVED***, source);
  ***REMOVED***;
