  /**
   *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
   *
   * @example
   *  var res = Rx.Observable.range(0, 10);
   *  var res = Rx.Observable.range(0, 10, Rx.Scheduler.timeout);
   * @param ***REMOVED***Number***REMOVED*** start The value of the first integer in the sequence.
   * @param ***REMOVED***Number***REMOVED*** count The number of sequential integers to generate.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that contains a range of sequential integral numbers.
   */
  Observable.range = function (start, count, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new AnonymousObservable(function (observer) ***REMOVED***
      return scheduler.scheduleRecursiveWithState(0, function (i, self) ***REMOVED***
        if (i < count) ***REMOVED***
          observer.onNext(start + i);
          self(i + 1);
        ***REMOVED*** else ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***;
