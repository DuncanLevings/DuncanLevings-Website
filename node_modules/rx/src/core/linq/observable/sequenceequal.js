  /**
   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
   *
   * @example
   * var res = res = source.sequenceEqual([1,2,3]);
   * var res = res = source.sequenceEqual([***REMOVED*** value: 42 ***REMOVED***], function (x, y) ***REMOVED*** return x.value === y.value; ***REMOVED***);
   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue(***REMOVED*** value: 42 ***REMOVED***), function (x, y) ***REMOVED*** return x.value === y.value; ***REMOVED***);
   * @param ***REMOVED***Observable***REMOVED*** second Second observable sequence or array to compare.
   * @param ***REMOVED***Function***REMOVED*** [comparer] Comparer used to compare elements of both sequences.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
   */
  observableProto.sequenceEqual = function (second, comparer) ***REMOVED***
    var first = this;
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) ***REMOVED***
      var donel = false, doner = false, ql = [], qr = [];
      var subscription1 = first.subscribe(function (x) ***REMOVED***
        var equal, v;
        if (qr.length > 0) ***REMOVED***
          v = qr.shift();
          try ***REMOVED***
            equal = comparer(v, x);
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***
          if (!equal) ***REMOVED***
            o.onNext(false);
            o.onCompleted();
          ***REMOVED***
        ***REMOVED*** else if (doner) ***REMOVED***
          o.onNext(false);
          o.onCompleted();
        ***REMOVED*** else ***REMOVED***
          ql.push(x);
        ***REMOVED***
      ***REMOVED***, function(e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED***
        donel = true;
        if (ql.length === 0) ***REMOVED***
          if (qr.length > 0) ***REMOVED***
            o.onNext(false);
            o.onCompleted();
          ***REMOVED*** else if (doner) ***REMOVED***
            o.onNext(true);
            o.onCompleted();
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);

      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
      isPromise(second) && (second = observableFromPromise(second));
      var subscription2 = second.subscribe(function (x) ***REMOVED***
        var equal;
        if (ql.length > 0) ***REMOVED***
          var v = ql.shift();
          try ***REMOVED***
            equal = comparer(v, x);
          ***REMOVED*** catch (exception) ***REMOVED***
            o.onError(exception);
            return;
          ***REMOVED***
          if (!equal) ***REMOVED***
            o.onNext(false);
            o.onCompleted();
          ***REMOVED***
        ***REMOVED*** else if (donel) ***REMOVED***
          o.onNext(false);
          o.onCompleted();
        ***REMOVED*** else ***REMOVED***
          qr.push(x);
        ***REMOVED***
      ***REMOVED***, function(e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED***
        doner = true;
        if (qr.length === 0) ***REMOVED***
          if (ql.length > 0) ***REMOVED***
            o.onNext(false);
            o.onCompleted();
          ***REMOVED*** else if (donel) ***REMOVED***
            o.onNext(true);
            o.onCompleted();
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***);
      return new CompositeDisposable(subscription1, subscription2);
    ***REMOVED***, first);
  ***REMOVED***;
