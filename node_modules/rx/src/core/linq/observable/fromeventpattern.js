  /**
   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
   * @param ***REMOVED***Function***REMOVED*** addHandler The function to add a handler to the emitter.
   * @param ***REMOVED***Function***REMOVED*** [removeHandler] The optional function to remove a handler from an emitter.
   * @param ***REMOVED***Function***REMOVED*** [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence which wraps an event from an event emitter
   */
  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) ***REMOVED***
    return new AnonymousObservable(function (observer) ***REMOVED***
      function innerHandler (e) ***REMOVED***
        var result = e;
        if (selector) ***REMOVED***
          try ***REMOVED***
            result = selector(arguments);
          ***REMOVED*** catch (err) ***REMOVED***
            observer.onError(err);
            return;
          ***REMOVED***
        ***REMOVED***
        observer.onNext(result);
      ***REMOVED***

      var returnValue = addHandler(innerHandler);
      return disposableCreate(function () ***REMOVED***
        if (removeHandler) ***REMOVED***
          removeHandler(innerHandler, returnValue);
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***).publish().refCount();
  ***REMOVED***;
