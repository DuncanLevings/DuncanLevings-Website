  /**
   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
   *
   * @example
   *  var res = Rx.Observable.generate(0, function (x) ***REMOVED*** return x < 10; ***REMOVED***, function (x) ***REMOVED*** return x + 1; ***REMOVED***, function (x) ***REMOVED*** return x; ***REMOVED***);
   *  var res = Rx.Observable.generate(0, function (x) ***REMOVED*** return x < 10; ***REMOVED***, function (x) ***REMOVED*** return x + 1; ***REMOVED***, function (x) ***REMOVED*** return x; ***REMOVED***, Rx.Scheduler.timeout);
   * @param ***REMOVED***Mixed***REMOVED*** initialState Initial state.
   * @param ***REMOVED***Function***REMOVED*** condition Condition to terminate generation (upon returning false).
   * @param ***REMOVED***Function***REMOVED*** iterate Iteration step function.
   * @param ***REMOVED***Function***REMOVED*** resultSelector Selector function for results produced in the sequence.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
   * @returns ***REMOVED***Observable***REMOVED*** The generated sequence.
   */
  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new AnonymousObservable(function (observer) ***REMOVED***
      var first = true, state = initialState;
      return scheduler.scheduleRecursive(function (self) ***REMOVED***
        var hasResult, result;
        try ***REMOVED***
          if (first) ***REMOVED***
            first = false;
          ***REMOVED*** else ***REMOVED***
            state = iterate(state);
          ***REMOVED***
          hasResult = condition(state);
          if (hasResult) ***REMOVED***
            result = resultSelector(state);
          ***REMOVED***
        ***REMOVED*** catch (exception) ***REMOVED***
          observer.onError(exception);
          return;
        ***REMOVED***
        if (hasResult) ***REMOVED***
          observer.onNext(result);
          self();
        ***REMOVED*** else ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***);
  ***REMOVED***;
