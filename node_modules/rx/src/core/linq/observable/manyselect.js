  /**
   * Comonadic bind operator.
   * @param ***REMOVED***Function***REMOVED*** selector A transform function to apply to each element.
   * @param ***REMOVED***Object***REMOVED*** scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence which results from the comonadic bind operation.
   */
  observableProto.manySelect = function (selector, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    var source = this;
    return observableDefer(function () ***REMOVED***
      var chain;

      return source
        .map(function (x) ***REMOVED***
          var curr = new ChainObservable(x);

          chain && chain.onNext(x);
          chain = curr;

          return curr;
        ***REMOVED***)
        .tap(
          noop,
          function (e) ***REMOVED*** chain && chain.onError(e); ***REMOVED***,
          function () ***REMOVED*** chain && chain.onCompleted(); ***REMOVED***
        )
        .observeOn(scheduler)
        .map(selector);
    ***REMOVED***, source);
  ***REMOVED***;

  var ChainObservable = (function (__super__) ***REMOVED***

    function subscribe (observer) ***REMOVED***
      var self = this, g = new CompositeDisposable();
      g.add(currentThreadScheduler.schedule(function () ***REMOVED***
        observer.onNext(self.head);
        g.add(self.tail.mergeAll().subscribe(observer));
      ***REMOVED***));

      return g;
    ***REMOVED***

    inherits(ChainObservable, __super__);

    function ChainObservable(head) ***REMOVED***
      __super__.call(this, subscribe);
      this.head = head;
      this.tail = new AsyncSubject();
    ***REMOVED***

    addProperties(ChainObservable.prototype, Observer, ***REMOVED***
      onCompleted: function () ***REMOVED***
        this.onNext(Observable.empty());
      ***REMOVED***,
      onError: function (e) ***REMOVED***
        this.onNext(Observable.throwException(e));
      ***REMOVED***,
      onNext: function (v) ***REMOVED***
        this.tail.onNext(v);
        this.tail.onCompleted();
      ***REMOVED***
    ***REMOVED***);

    return ChainObservable;

  ***REMOVED***(Observable));
