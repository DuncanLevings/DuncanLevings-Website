  /**
   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param ***REMOVED***Function | Observer***REMOVED*** observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
   * @param ***REMOVED***Function***REMOVED*** [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
   * @param ***REMOVED***Function***REMOVED*** [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
   * @returns ***REMOVED***Observable***REMOVED*** The source sequence with the side-effecting behavior applied.
   */
  observableProto['do'] = observableProto.tap = function (observerOrOnNext, onError, onCompleted) ***REMOVED***
    var source = this, onNextFunc;
    if (typeof observerOrOnNext === 'function') ***REMOVED***
      onNextFunc = observerOrOnNext;
    ***REMOVED*** else ***REMOVED***
      onNextFunc = function (x) ***REMOVED*** observerOrOnNext.onNext(x); ***REMOVED***;
      onError = function (e) ***REMOVED*** observerOrOnNext.onError(e); ***REMOVED***;
      onCompleted = function () ***REMOVED*** observerOrOnNext.onCompleted(); ***REMOVED***
    ***REMOVED***
    return new AnonymousObservable(function (observer) ***REMOVED***
      return source.subscribe(function (x) ***REMOVED***
        try ***REMOVED***
          onNextFunc(x);
        ***REMOVED*** catch (e) ***REMOVED***
          observer.onError(e);
        ***REMOVED***
        observer.onNext(x);
      ***REMOVED***, function (err) ***REMOVED***
        if (onError) ***REMOVED***
          try ***REMOVED***
            onError(err);
          ***REMOVED*** catch (e) ***REMOVED***
            observer.onError(e);
          ***REMOVED***
        ***REMOVED***
        observer.onError(err);
      ***REMOVED***, function () ***REMOVED***
        if (onCompleted) ***REMOVED***
          try ***REMOVED***
            onCompleted();
          ***REMOVED*** catch (e) ***REMOVED***
            observer.onError(e);
          ***REMOVED***
        ***REMOVED***
        observer.onCompleted();
      ***REMOVED***);
    ***REMOVED***, this);
  ***REMOVED***;

  /** @deprecated use #do or #tap instead. */
  observableProto.doAction = function () ***REMOVED***
    //deprecate('doAction', 'do or tap');
    return this.tap.apply(this, arguments);
  ***REMOVED***;

  /**
   *  Invokes an action for each element in the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param ***REMOVED***Function***REMOVED*** onNext Action to invoke for each element in the observable sequence.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** The source sequence with the side-effecting behavior applied.
   */
  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) ***REMOVED***
    return this.tap(typeof thisArg !== 'undefined' ? function (x) ***REMOVED*** onNext.call(thisArg, x); ***REMOVED*** : onNext);
  ***REMOVED***;

  /**
   *  Invokes an action upon exceptional termination of the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param ***REMOVED***Function***REMOVED*** onError Action to invoke upon exceptional termination of the observable sequence.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** The source sequence with the side-effecting behavior applied.
   */
  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) ***REMOVED***
    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) ***REMOVED*** onError.call(thisArg, e); ***REMOVED*** : onError);
  ***REMOVED***;

  /**
   *  Invokes an action upon graceful termination of the observable sequence.
   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
   * @param ***REMOVED***Function***REMOVED*** onCompleted Action to invoke upon graceful termination of the observable sequence.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** The source sequence with the side-effecting behavior applied.
   */
  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) ***REMOVED***
    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () ***REMOVED*** onCompleted.call(thisArg); ***REMOVED*** : onCompleted);
  ***REMOVED***;
