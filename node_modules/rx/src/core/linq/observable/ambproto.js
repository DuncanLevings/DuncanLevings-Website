  /**
   * Propagates the observable sequence or Promise that reacts first.
   * @param ***REMOVED***Observable***REMOVED*** rightSource Second observable sequence or Promise.
   * @returns ***REMOVED***Observable***REMOVED*** ***REMOVED***Observable***REMOVED*** An observable sequence that surfaces either of the given sequences, whichever reacted first.
   */
  observableProto.amb = function (rightSource) ***REMOVED***
    var leftSource = this;
    return new AnonymousObservable(function (observer) ***REMOVED***
      var choice,
        leftChoice = 'L', rightChoice = 'R',
        leftSubscription = new SingleAssignmentDisposable(),
        rightSubscription = new SingleAssignmentDisposable();

      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));

      function choiceL() ***REMOVED***
        if (!choice) ***REMOVED***
          choice = leftChoice;
          rightSubscription.dispose();
        ***REMOVED***
      ***REMOVED***

      function choiceR() ***REMOVED***
        if (!choice) ***REMOVED***
          choice = rightChoice;
          leftSubscription.dispose();
        ***REMOVED***
      ***REMOVED***

      leftSubscription.setDisposable(leftSource.subscribe(function (left) ***REMOVED***
        choiceL();
        if (choice === leftChoice) ***REMOVED***
          observer.onNext(left);
        ***REMOVED***
      ***REMOVED***, function (err) ***REMOVED***
        choiceL();
        if (choice === leftChoice) ***REMOVED***
          observer.onError(err);
        ***REMOVED***
      ***REMOVED***, function () ***REMOVED***
        choiceL();
        if (choice === leftChoice) ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***));

      rightSubscription.setDisposable(rightSource.subscribe(function (right) ***REMOVED***
        choiceR();
        if (choice === rightChoice) ***REMOVED***
          observer.onNext(right);
        ***REMOVED***
      ***REMOVED***, function (err) ***REMOVED***
        choiceR();
        if (choice === rightChoice) ***REMOVED***
          observer.onError(err);
        ***REMOVED***
      ***REMOVED***, function () ***REMOVED***
        choiceR();
        if (choice === rightChoice) ***REMOVED***
          observer.onCompleted();
        ***REMOVED***
      ***REMOVED***));

      return new CompositeDisposable(leftSubscription, rightSubscription);
    ***REMOVED***);
  ***REMOVED***;
