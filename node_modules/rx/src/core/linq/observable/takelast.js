  /**
   *  Returns a specified number of contiguous elements from the end of an observable sequence.
   * @description
   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
   * @param ***REMOVED***Number***REMOVED*** count Number of elements to take from the end of the source sequence.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing the specified number of elements from the end of the source sequence.
   */
  observableProto.takeLast = function (count) ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (o) ***REMOVED***
      var q = [];
      return source.subscribe(function (x) ***REMOVED***
        q.push(x);
        q.length > count && q.shift();
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED***
        while (q.length > 0) ***REMOVED*** o.onNext(q.shift()); ***REMOVED***
        o.onCompleted();
      ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
