  /**
   *  Returns elements from an observable sequence as long as a specified condition is true.
   *  The element's index is used in the logic of the predicate function.
   * @param ***REMOVED***Function***REMOVED*** predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
   */
  observableProto.takeWhile = function (predicate, thisArg) ***REMOVED***
    var source = this,
        callback = bindCallback(predicate, thisArg, 3);
    return new AnonymousObservable(function (o) ***REMOVED***
      var i = 0, running = true;
      return source.subscribe(function (x) ***REMOVED***
        if (running) ***REMOVED***
          try ***REMOVED***
            running = callback(x, i++, source);
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***
          if (running) ***REMOVED***
            o.onNext(x);
          ***REMOVED*** else ***REMOVED***
            o.onCompleted();
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
