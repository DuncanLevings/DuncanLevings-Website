  /**
   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
   * @returns ***REMOVED***Observable***REMOVED*** The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
   */
  observableProto['switch'] = observableProto.switchLatest = function () ***REMOVED***
    var sources = this;
    return new AnonymousObservable(function (observer) ***REMOVED***
      var hasLatest = false,
        innerSubscription = new SerialDisposable(),
        isStopped = false,
        latest = 0,
        subscription = sources.subscribe(
          function (innerSource) ***REMOVED***
            var d = new SingleAssignmentDisposable(), id = ++latest;
            hasLatest = true;
            innerSubscription.setDisposable(d);

            // Check if Promise or Observable
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

            d.setDisposable(innerSource.subscribe(
              function (x) ***REMOVED*** latest === id && observer.onNext(x); ***REMOVED***,
              function (e) ***REMOVED*** latest === id && observer.onError(e); ***REMOVED***,
              function () ***REMOVED***
                if (latest === id) ***REMOVED***
                  hasLatest = false;
                  isStopped && observer.onCompleted();
                ***REMOVED***
              ***REMOVED***));
          ***REMOVED***,
          observer.onError.bind(observer),
          function () ***REMOVED***
            isStopped = true;
            !hasLatest && observer.onCompleted();
          ***REMOVED***);
      return new CompositeDisposable(subscription, innerSubscription);
    ***REMOVED***, sources);
  ***REMOVED***;
