   /**
   *  Uses selector to determine which source in sources to use.
   *  There is an alias 'switchCase' for browsers <IE9.
   *
   * @example
   *  1 - res = Rx.Observable.case(selector, ***REMOVED*** '1': obs1, '2': obs2 ***REMOVED***);
   *  1 - res = Rx.Observable.case(selector, ***REMOVED*** '1': obs1, '2': obs2 ***REMOVED***, obs0);
   *  1 - res = Rx.Observable.case(selector, ***REMOVED*** '1': obs1, '2': obs2 ***REMOVED***, scheduler);
   *
   * @param ***REMOVED***Function***REMOVED*** selector The function which extracts the value for to test in a case statement.
   * @param ***REMOVED***Array***REMOVED*** sources A object which has keys which correspond to the case statement labels.
   * @param ***REMOVED***Observable***REMOVED*** [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
   *
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence which is determined by a case statement.
   */
  Observable['case'] = Observable.switchCase = function (selector, sources, defaultSourceOrScheduler) ***REMOVED***
    return observableDefer(function () ***REMOVED***
      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());

      typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));

      var result = sources[selector()];
      isPromise(result) && (result = observableFromPromise(result));

      return result || defaultSourceOrScheduler;
    ***REMOVED***);
  ***REMOVED***;
