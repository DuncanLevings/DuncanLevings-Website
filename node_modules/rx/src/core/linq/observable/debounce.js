  /**
   *  Ignores values from an observable sequence which are followed by another value before dueTime.
   * @param ***REMOVED***Number***REMOVED*** dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
   * @returns ***REMOVED***Observable***REMOVED*** The debounced sequence.
   */
  observableProto.debounce = observableProto.throttleWithTimeout = function (dueTime, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    var source = this;
    return new AnonymousObservable(function (observer) ***REMOVED***
      var cancelable = new SerialDisposable(), hasvalue = false, value, id = 0;
      var subscription = source.subscribe(
        function (x) ***REMOVED***
          hasvalue = true;
          value = x;
          id++;
          var currentId = id,
            d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function () ***REMOVED***
            hasvalue && id === currentId && observer.onNext(value);
            hasvalue = false;
          ***REMOVED***));
        ***REMOVED***,
        function (e) ***REMOVED***
          cancelable.dispose();
          observer.onError(e);
          hasvalue = false;
          id++;
        ***REMOVED***,
        function () ***REMOVED***
          cancelable.dispose();
          hasvalue && observer.onNext(value);
          observer.onCompleted();
          hasvalue = false;
          id++;
        ***REMOVED***);
      return new CompositeDisposable(subscription, cancelable);
    ***REMOVED***, this);
  ***REMOVED***;

  /**
   * @deprecated use #debounce or #throttleWithTimeout instead.
   */
  observableProto.throttle = function(dueTime, scheduler) ***REMOVED***
    //deprecate('throttle', 'debounce or throttleWithTimeout');
    return this.debounce(dueTime, scheduler);
  ***REMOVED***;
