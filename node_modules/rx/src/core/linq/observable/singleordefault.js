  /**
   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
   * @example
   * var res = res = source.singleOrDefault();
   * var res = res = source.singleOrDefault(function (x) ***REMOVED*** return x === 42; ***REMOVED***);
   * res = source.singleOrDefault(function (x) ***REMOVED*** return x === 42; ***REMOVED***, 0);
   * res = source.singleOrDefault(null, 0);
   * @memberOf Observable#
   * @param ***REMOVED***Function***REMOVED*** predicate A predicate function to evaluate for elements in the source sequence.
   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as `this` when executing the predicate.
   * @returns ***REMOVED***Observable***REMOVED*** Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
   */
  observableProto.singleOrDefault = function (predicate, defaultValue, thisArg) ***REMOVED***
    return predicate && isFunction(predicate) ?
      this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) :
      singleOrDefaultAsync(this, true, defaultValue);
  ***REMOVED***;
