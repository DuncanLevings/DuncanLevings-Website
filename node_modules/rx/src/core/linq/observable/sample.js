  function sampleObservable(source, sampler) ***REMOVED***
    return new AnonymousObservable(function (observer) ***REMOVED***
      var atEnd, value, hasValue;

      function sampleSubscribe() ***REMOVED***
        if (hasValue) ***REMOVED***
          hasValue = false;
          observer.onNext(value);
        ***REMOVED***
        atEnd && observer.onCompleted();
      ***REMOVED***

      return new CompositeDisposable(
        source.subscribe(function (newValue) ***REMOVED***
          hasValue = true;
          value = newValue;
        ***REMOVED***, observer.onError.bind(observer), function () ***REMOVED***
          atEnd = true;
        ***REMOVED***),
        sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe)
      );
    ***REMOVED***, source);
  ***REMOVED***

  /**
   *  Samples the observable sequence at each interval.
   *
   * @example
   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
   *  2 - res = source.sample(5000); // 5 seconds
   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
   *
   * @param ***REMOVED***Mixed***REMOVED*** intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
   * @returns ***REMOVED***Observable***REMOVED*** Sampled observable sequence.
   */
  observableProto.sample = observableProto.throttleLatest = function (intervalOrSampler, scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return typeof intervalOrSampler === 'number' ?
      sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
      sampleObservable(this, intervalOrSampler);
  ***REMOVED***;
