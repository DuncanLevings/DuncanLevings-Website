  /**
   * Converts a callback function to an observable sequence.
   *
   * @param ***REMOVED***Function***REMOVED*** function Function with a callback as the last parameter to convert to an Observable sequence.
   * @param ***REMOVED***Mixed***REMOVED*** [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
   * @param ***REMOVED***Function***REMOVED*** [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
   * @returns ***REMOVED***Function***REMOVED*** A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
   */
  Observable.fromCallback = function (func, context, selector) ***REMOVED***
    return function () ***REMOVED***
      var args = slice.call(arguments, 0);

      return new AnonymousObservable(function (observer) ***REMOVED***
        function handler() ***REMOVED***
          var results = arguments;

          if (selector) ***REMOVED***
            try ***REMOVED***
              results = selector(results);
            ***REMOVED*** catch (err) ***REMOVED***
              observer.onError(err);
              return;
            ***REMOVED***

            observer.onNext(results);
          ***REMOVED*** else ***REMOVED***
            if (results.length <= 1) ***REMOVED***
              observer.onNext.apply(observer, results);
            ***REMOVED*** else ***REMOVED***
              observer.onNext(results);
            ***REMOVED***
          ***REMOVED***

          observer.onCompleted();
        ***REMOVED***

        args.push(handler);
        func.apply(context, args);
      ***REMOVED***).publishLast().refCount();
    ***REMOVED***;
  ***REMOVED***;
