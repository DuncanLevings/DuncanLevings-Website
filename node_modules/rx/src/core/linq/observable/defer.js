  /**
   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
   *
   * @example
   *  var res = Rx.Observable.defer(function () ***REMOVED*** return Rx.Observable.fromArray([1,2,3]); ***REMOVED***);
   * @param ***REMOVED***Function***REMOVED*** observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence whose observers trigger an invocation of the given observable factory function.
   */
  var observableDefer = Observable.defer = function (observableFactory) ***REMOVED***
    return new AnonymousObservable(function (observer) ***REMOVED***
      var result;
      try ***REMOVED***
        result = observableFactory();
      ***REMOVED*** catch (e) ***REMOVED***
        return observableThrow(e).subscribe(observer);
      ***REMOVED***
      isPromise(result) && (result = observableFromPromise(result));
      return result.subscribe(observer);
    ***REMOVED***);
  ***REMOVED***;
