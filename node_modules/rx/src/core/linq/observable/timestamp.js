  /**
   *  Records the timestamp for each value in an observable sequence.
   *
   * @example
   *  1 - res = source.timestamp(); // produces ***REMOVED*** value: x, timestamp: ts ***REMOVED***
   *  2 - res = source.timestamp(Rx.Scheduler.timeout);
   *
   * @param ***REMOVED***Scheduler***REMOVED*** [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence with timestamp information on values.
   */
  observableProto.timestamp = function (scheduler) ***REMOVED***
    isScheduler(scheduler) || (scheduler = timeoutScheduler);
    return this.map(function (x) ***REMOVED***
      return ***REMOVED*** value: x, timestamp: scheduler.now() ***REMOVED***;
    ***REMOVED***);
  ***REMOVED***;
