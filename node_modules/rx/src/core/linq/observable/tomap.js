  /**
  * Converts the observable sequence to a Map if it exists.
  * @param ***REMOVED***Function***REMOVED*** keySelector A function which produces the key for the Map.
  * @param ***REMOVED***Function***REMOVED*** [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
  * @returns ***REMOVED***Observable***REMOVED*** An observable sequence with a single value of a Map containing the values from the observable sequence.
  */
  observableProto.toMap = function (keySelector, elementSelector) ***REMOVED***
    if (typeof root.Map === 'undefined') ***REMOVED*** throw new TypeError(); ***REMOVED***
    var source = this;
    return new AnonymousObservable(function (o) ***REMOVED***
      var m = new root.Map();
      return source.subscribe(
        function (x) ***REMOVED***
          var key;
          try ***REMOVED***
            key = keySelector(x);
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***

          var element = x;
          if (elementSelector) ***REMOVED***
            try ***REMOVED***
              element = elementSelector(x);
            ***REMOVED*** catch (e) ***REMOVED***
              o.onError(e);
              return;
            ***REMOVED***
          ***REMOVED***

          m.set(key, element);
        ***REMOVED***,
        function (e) ***REMOVED*** o.onError(e); ***REMOVED***,
        function () ***REMOVED***
          o.onNext(m);
          o.onCompleted();
        ***REMOVED***);
    ***REMOVED***, source);
  ***REMOVED***;
