  /**
   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
   * @param ***REMOVED***Function***REMOVED*** [selector] A transform function to apply to each element.
   * @param ***REMOVED***Any***REMOVED*** [thisArg] Object to use as this when executing callback.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence containing a single element with the average of the sequence of values.
   */
  observableProto.average = function (keySelector, thisArg) ***REMOVED***
    return keySelector && isFunction(keySelector) ?
      this.map(keySelector, thisArg).average() :
      this.reduce(function (prev, cur) ***REMOVED***
        return ***REMOVED***
          sum: prev.sum + cur,
          count: prev.count + 1
        ***REMOVED***;
      ***REMOVED***, ***REMOVED***sum: 0, count: 0 ***REMOVED***).map(function (s) ***REMOVED***
        if (s.count === 0) ***REMOVED*** throw new Error(sequenceContainsNoElements); ***REMOVED***
        return s.sum / s.count;
      ***REMOVED***);
  ***REMOVED***;
