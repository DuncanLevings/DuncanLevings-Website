  /**
   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
   *
   *  var obs = observable.distinctUntilChanged();
   *  var obs = observable.distinctUntilChanged(function (x) ***REMOVED*** return x.id; ***REMOVED***);
   *  var obs = observable.distinctUntilChanged(function (x) ***REMOVED*** return x.id; ***REMOVED***, function (x, y) ***REMOVED*** return x === y; ***REMOVED***);
   *
   * @param ***REMOVED***Function***REMOVED*** [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
   * @param ***REMOVED***Function***REMOVED*** [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
   * @returns ***REMOVED***Observable***REMOVED*** An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
   */
  observableProto.distinctUntilChanged = function (keySelector, comparer) ***REMOVED***
    var source = this;
    keySelector || (keySelector = identity);
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function (o) ***REMOVED***
      var hasCurrentKey = false, currentKey;
      return source.subscribe(function (value) ***REMOVED***
          var comparerEquals = false, key;
          try ***REMOVED***
            key = keySelector(value);
          ***REMOVED*** catch (e) ***REMOVED***
            o.onError(e);
            return;
          ***REMOVED***
          if (hasCurrentKey) ***REMOVED***
            try ***REMOVED***
              comparerEquals = comparer(currentKey, key);
            ***REMOVED*** catch (e) ***REMOVED***
              o.onError(e);
              return;
            ***REMOVED***
          ***REMOVED***
          if (!hasCurrentKey || !comparerEquals) ***REMOVED***
            hasCurrentKey = true;
            currentKey = key;
            o.onNext(value);
          ***REMOVED***
      ***REMOVED***, function (e) ***REMOVED*** o.onError(e); ***REMOVED***, function () ***REMOVED*** o.onCompleted(); ***REMOVED***);
    ***REMOVED***, this);
  ***REMOVED***;
