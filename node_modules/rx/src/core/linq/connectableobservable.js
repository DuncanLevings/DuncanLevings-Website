  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) ***REMOVED***
    inherits(ConnectableObservable, __super__);

    function ConnectableObservable(source, subject) ***REMOVED***
      var hasSubscription = false,
        subscription,
        sourceObservable = source.asObservable();

      this.connect = function () ***REMOVED***
        if (!hasSubscription) ***REMOVED***
          hasSubscription = true;
          subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function () ***REMOVED***
            hasSubscription = false;
          ***REMOVED***));
        ***REMOVED***
        return subscription;
      ***REMOVED***;

      __super__.call(this, function (o) ***REMOVED*** return subject.subscribe(o); ***REMOVED***);
    ***REMOVED***

    ConnectableObservable.prototype.refCount = function () ***REMOVED***
      var connectableSubscription, count = 0, source = this;
      return new AnonymousObservable(function (observer) ***REMOVED***
          var shouldConnect = ++count === 1,
            subscription = source.subscribe(observer);
          shouldConnect && (connectableSubscription = source.connect());
          return function () ***REMOVED***
            subscription.dispose();
            --count === 0 && connectableSubscription.dispose();
          ***REMOVED***;
      ***REMOVED***);
    ***REMOVED***;

    return ConnectableObservable;
  ***REMOVED***(Observable));
