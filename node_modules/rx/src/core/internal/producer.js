  var Producer = Rx.internals.Producer = (function (__super__) ***REMOVED***

    inherits(Producer, __super__);

    function subscribe(observer) ***REMOVED***
      var sink = new SingleAssignmentDisposable(),
          subscription = new SingleAssignmentDisposable();

      function setDisposable(s) ***REMOVED***
        sink.setDisposable(s);
      ***REMOVED***

      if (currentThreadScheduler.scheduleRequired()) ***REMOVED***
        currentThreadScheduler.scheduleWithState(this, function (_, me) ***REMOVED***
          subscription.setDisposable(me.run(observer, subscription, setDisposable));
        ***REMOVED***);
      ***REMOVED*** else ***REMOVED***
        subscription.setDisposable(this.run(observer, subscription, setDisposable));
      ***REMOVED***

      return new CompositeDisposable(sink, subscription);
    ***REMOVED***

    function Producer() ***REMOVED***
      __super__.call(this, subscribe);
    ***REMOVED***

    return Producer;

  ***REMOVED***(Observable));
