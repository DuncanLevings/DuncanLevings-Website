  var slice = Array.prototype.slice;
  function argsOrArray(args, idx) ***REMOVED***
    return args.length === 1 && Array.isArray(args[idx]) ?
      args[idx] :
      slice.call(args);
  ***REMOVED***
  var hasProp = ***REMOVED******REMOVED***.hasOwnProperty;

  var inherits = this.inherits = Rx.internals.inherits = function (child, parent) ***REMOVED***
    function __() ***REMOVED*** this.constructor = child; ***REMOVED***
    __.prototype = parent.prototype;
    child.prototype = new __();
  ***REMOVED***;

  var addProperties = Rx.internals.addProperties = function (obj) ***REMOVED***
    var sources = slice.call(arguments, 1);
    for (var i = 0, len = sources.length; i < len; i++) ***REMOVED***
      var source = sources[i];
      for (var prop in source) ***REMOVED***
        obj[prop] = source[prop];
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  // Rx Utils
  var addRef = Rx.internals.addRef = function (xs, r) ***REMOVED***
    return new AnonymousObservable(function (observer) ***REMOVED***
      return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
    ***REMOVED***);
  ***REMOVED***;

  function arrayInitialize(count, factory) ***REMOVED***
    var a = new Array(count);
    for (var i = 0; i < count; i++) ***REMOVED***
      a[i] = factory();
    ***REMOVED***
    return a;
  ***REMOVED***
