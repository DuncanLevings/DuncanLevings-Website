// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

;(function (factory) ***REMOVED***
    var objectTypes = ***REMOVED***
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
    ***REMOVED***;

    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;

    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) ***REMOVED***
        root = freeGlobal;
    ***REMOVED***

    // Because of build optimizers
    if (typeof define === 'function' && define.amd) ***REMOVED***
        define(['rx'], function (Rx, exports) ***REMOVED***
            return factory(root, exports, Rx);
        ***REMOVED***);
    ***REMOVED*** else if (typeof module === 'object' && module && module.exports === freeExports) ***REMOVED***
        module.exports = factory(root, module.exports, require('./rx'));
    ***REMOVED*** else ***REMOVED***
        root.Rx = factory(root, ***REMOVED******REMOVED***, root.Rx);
    ***REMOVED***
***REMOVED***.call(this, function (root, exp, Rx, undefined) ***REMOVED***

	// Aliases
	var Scheduler = Rx.Scheduler,
		PriorityQueue = Rx.internals.PriorityQueue,
		ScheduledItem = Rx.internals.ScheduledItem,
		SchedulePeriodicRecursive  = Rx.internals.SchedulePeriodicRecursive,
		disposableEmpty = Rx.Disposable.empty,
		inherits = Rx.internals.inherits,
    defaultSubComparer = Rx.helpers.defaultSubComparer;

  /** Provides a set of extension methods for virtual time scheduling. */
  Rx.VirtualTimeScheduler = (function (__super__) ***REMOVED***

    function notImplemented() ***REMOVED***
        throw new Error('Not implemented');
    ***REMOVED***

    function localNow() ***REMOVED***
      return this.toDateTimeOffset(this.clock);
    ***REMOVED***

    function scheduleNow(state, action) ***REMOVED***
      return this.scheduleAbsoluteWithState(state, this.clock, action);
    ***REMOVED***

    function scheduleRelative(state, dueTime, action) ***REMOVED***
      return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
    ***REMOVED***

    function scheduleAbsolute(state, dueTime, action) ***REMOVED***
      return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
    ***REMOVED***

    function invokeAction(scheduler, action) ***REMOVED***
      action();
      return disposableEmpty;
    ***REMOVED***

    inherits(VirtualTimeScheduler, __super__);

    /**
     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
     *
     * @constructor
     * @param ***REMOVED***Number***REMOVED*** initialClock Initial value for the clock.
     * @param ***REMOVED***Function***REMOVED*** comparer Comparer to determine causality of events based on absolute time.
     */
    function VirtualTimeScheduler(initialClock, comparer) ***REMOVED***
      this.clock = initialClock;
      this.comparer = comparer;
      this.isEnabled = false;
      this.queue = new PriorityQueue(1024);
      __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
    ***REMOVED***

    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;

    /**
     * Adds a relative time value to an absolute time value.
     * @param ***REMOVED***Number***REMOVED*** absolute Absolute virtual time value.
     * @param ***REMOVED***Number***REMOVED*** relative Relative virtual time value to add.
     * @return ***REMOVED***Number***REMOVED*** Resulting absolute virtual time sum value.
     */
    VirtualTimeSchedulerPrototype.add = notImplemented;

    /**
     * Converts an absolute time to a number
     * @param ***REMOVED***Any***REMOVED*** The absolute time.
     * @returns ***REMOVED***Number***REMOVED*** The absolute time in ms
     */
    VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;

    /**
     * Converts the TimeSpan value to a relative virtual time value.
     * @param ***REMOVED***Number***REMOVED*** timeSpan TimeSpan value to convert.
     * @return ***REMOVED***Number***REMOVED*** Corresponding relative virtual time value.
     */
    VirtualTimeSchedulerPrototype.toRelative = notImplemented;

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
     * @param ***REMOVED***Mixed***REMOVED*** state Initial state passed to the action upon the first iteration.
     * @param ***REMOVED***Number***REMOVED*** period Period for running the work periodically.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed, potentially updating the state.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled recurring action (best effort).
     */
    VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function (state, period, action) ***REMOVED***
      var s = new SchedulePeriodicRecursive(this, state, period, action);
      return s.start();
    ***REMOVED***;

    /**
     * Schedules an action to be executed after dueTime.
     * @param ***REMOVED***Mixed***REMOVED*** state State passed to the action to be executed.
     * @param ***REMOVED***Number***REMOVED*** dueTime Relative time after which to execute the action.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function (state, dueTime, action) ***REMOVED***
      var runAt = this.add(this.clock, dueTime);
      return this.scheduleAbsoluteWithState(state, runAt, action);
    ***REMOVED***;

    /**
     * Schedules an action to be executed at dueTime.
     * @param ***REMOVED***Number***REMOVED*** dueTime Relative time after which to execute the action.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleRelative = function (dueTime, action) ***REMOVED***
      return this.scheduleRelativeWithState(action, dueTime, invokeAction);
    ***REMOVED***;

    /**
     * Starts the virtual time scheduler.
     */
    VirtualTimeSchedulerPrototype.start = function () ***REMOVED***
      if (!this.isEnabled) ***REMOVED***
        this.isEnabled = true;
        do ***REMOVED***
          var next = this.getNext();
          if (next !== null) ***REMOVED***
            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
            next.invoke();
          ***REMOVED*** else ***REMOVED***
            this.isEnabled = false;
          ***REMOVED***
        ***REMOVED*** while (this.isEnabled);
      ***REMOVED***
    ***REMOVED***;

    /**
     * Stops the virtual time scheduler.
     */
    VirtualTimeSchedulerPrototype.stop = function () ***REMOVED***
      this.isEnabled = false;
    ***REMOVED***;

    /**
     * Advances the scheduler's clock to the specified time, running all work till that point.
     * @param ***REMOVED***Number***REMOVED*** time Absolute time to advance the scheduler's clock to.
     */
    VirtualTimeSchedulerPrototype.advanceTo = function (time) ***REMOVED***
      var dueToClock = this.comparer(this.clock, time);
      if (this.comparer(this.clock, time) > 0) ***REMOVED***
        throw new Error(argumentOutOfRange);
      ***REMOVED***
      if (dueToClock === 0) ***REMOVED***
        return;
      ***REMOVED***
      if (!this.isEnabled) ***REMOVED***
        this.isEnabled = true;
        do ***REMOVED***
          var next = this.getNext();
          if (next !== null && this.comparer(next.dueTime, time) <= 0) ***REMOVED***
            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
            next.invoke();
          ***REMOVED*** else ***REMOVED***
            this.isEnabled = false;
          ***REMOVED***
        ***REMOVED*** while (this.isEnabled);
        this.clock = time;
      ***REMOVED***
    ***REMOVED***;

    /**
     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
     * @param ***REMOVED***Number***REMOVED*** time Relative time to advance the scheduler's clock by.
     */
    VirtualTimeSchedulerPrototype.advanceBy = function (time) ***REMOVED***
      var dt = this.add(this.clock, time),
          dueToClock = this.comparer(this.clock, dt);
      if (dueToClock > 0) ***REMOVED*** throw new Error(argumentOutOfRange); ***REMOVED***
      if (dueToClock === 0) ***REMOVED***  return; ***REMOVED***

      this.advanceTo(dt);
    ***REMOVED***;

    /**
     * Advances the scheduler's clock by the specified relative time.
     * @param ***REMOVED***Number***REMOVED*** time Relative time to advance the scheduler's clock by.
     */
    VirtualTimeSchedulerPrototype.sleep = function (time) ***REMOVED***
      var dt = this.add(this.clock, time);
      if (this.comparer(this.clock, dt) >= 0) ***REMOVED*** throw new Error(argumentOutOfRange); ***REMOVED***

      this.clock = dt;
    ***REMOVED***;

    /**
     * Gets the next scheduled item to be executed.
     * @returns ***REMOVED***ScheduledItem***REMOVED*** The next scheduled item.
     */
    VirtualTimeSchedulerPrototype.getNext = function () ***REMOVED***
      while (this.queue.length > 0) ***REMOVED***
        var next = this.queue.peek();
        if (next.isCancelled()) ***REMOVED***
          this.queue.dequeue();
        ***REMOVED*** else ***REMOVED***
          return next;
        ***REMOVED***
      ***REMOVED***
      return null;
    ***REMOVED***;

    /**
     * Schedules an action to be executed at dueTime.
     * @param ***REMOVED***Scheduler***REMOVED*** scheduler Scheduler to execute the action on.
     * @param ***REMOVED***Number***REMOVED*** dueTime Absolute time at which to execute the action.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (dueTime, action) ***REMOVED***
      return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
    ***REMOVED***;

    /**
     * Schedules an action to be executed at dueTime.
     * @param ***REMOVED***Mixed***REMOVED*** state State passed to the action to be executed.
     * @param ***REMOVED***Number***REMOVED*** dueTime Absolute time at which to execute the action.
     * @param ***REMOVED***Function***REMOVED*** action Action to be executed.
     * @returns ***REMOVED***Disposable***REMOVED*** The disposable object used to cancel the scheduled action (best effort).
     */
    VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function (state, dueTime, action) ***REMOVED***
      var self = this;

      function run(scheduler, state1) ***REMOVED***
        self.queue.remove(si);
        return action(scheduler, state1);
      ***REMOVED***

      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
      this.queue.enqueue(si);

      return si.disposable;
    ***REMOVED***;

    return VirtualTimeScheduler;
  ***REMOVED***(Scheduler));

  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
  Rx.HistoricalScheduler = (function (__super__) ***REMOVED***
    inherits(HistoricalScheduler, __super__);

    /**
     * Creates a new historical scheduler with the specified initial clock value.
     * @constructor
     * @param ***REMOVED***Number***REMOVED*** initialClock Initial value for the clock.
     * @param ***REMOVED***Function***REMOVED*** comparer Comparer to determine causality of events based on absolute time.
     */
    function HistoricalScheduler(initialClock, comparer) ***REMOVED***
      var clock = initialClock == null ? 0 : initialClock;
      var cmp = comparer || defaultSubComparer;
      __super__.call(this, clock, cmp);
    ***REMOVED***

    var HistoricalSchedulerProto = HistoricalScheduler.prototype;

    /**
     * Adds a relative time value to an absolute time value.
     * @param ***REMOVED***Number***REMOVED*** absolute Absolute virtual time value.
     * @param ***REMOVED***Number***REMOVED*** relative Relative virtual time value to add.
     * @return ***REMOVED***Number***REMOVED*** Resulting absolute virtual time sum value.
     */
    HistoricalSchedulerProto.add = function (absolute, relative) ***REMOVED***
      return absolute + relative;
    ***REMOVED***;

    HistoricalSchedulerProto.toDateTimeOffset = function (absolute) ***REMOVED***
      return new Date(absolute).getTime();
    ***REMOVED***;

    /**
     * Converts the TimeSpan value to a relative virtual time value.
     * @memberOf HistoricalScheduler
     * @param ***REMOVED***Number***REMOVED*** timeSpan TimeSpan value to convert.
     * @return ***REMOVED***Number***REMOVED*** Corresponding relative virtual time value.
     */
    HistoricalSchedulerProto.toRelative = function (timeSpan) ***REMOVED***
      return timeSpan;
    ***REMOVED***;

    return HistoricalScheduler;
  ***REMOVED***(Rx.VirtualTimeScheduler));

    return Rx;
***REMOVED***));
