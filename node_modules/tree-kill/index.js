'use strict';

var childProcess = require('child_process');
var spawn = childProcess.spawn;
var exec = childProcess.exec;

module.exports = function (pid, signal, callback) ***REMOVED***
    if (typeof signal === 'function' && callback === undefined) ***REMOVED***
        callback = signal;
        signal = undefined;
    ***REMOVED***

    pid = parseInt(pid);
    if (Number.isNaN(pid)) ***REMOVED***
        if (callback) ***REMOVED***
            return callback(new Error("pid must be a number"));
        ***REMOVED*** else ***REMOVED***
            throw new Error("pid must be a number");
        ***REMOVED***
    ***REMOVED***

    var tree = ***REMOVED******REMOVED***;
    var pidsToProcess = ***REMOVED******REMOVED***;
    tree[pid] = [];
    pidsToProcess[pid] = 1;

    switch (process.platform) ***REMOVED***
    case 'win32':
        exec('taskkill /pid ' + pid + ' /T /F', callback);
        break;
    case 'darwin':
        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) ***REMOVED***
          return spawn('pgrep', ['-P', parentPid]);
        ***REMOVED***, function () ***REMOVED***
            killAll(tree, signal, callback);
        ***REMOVED***);
        break;
    // case 'sunos':
    //     buildProcessTreeSunOS(pid, tree, pidsToProcess, function () ***REMOVED***
    //         killAll(tree, signal, callback);
    //     ***REMOVED***);
    //     break;
    default: // Linux
        buildProcessTree(pid, tree, pidsToProcess, function (parentPid) ***REMOVED***
          return spawn('ps', ['-o', 'pid', '--no-headers', '--ppid', parentPid]);
        ***REMOVED***, function () ***REMOVED***
            killAll(tree, signal, callback);
        ***REMOVED***);
        break;
    ***REMOVED***
***REMOVED***;

function killAll (tree, signal, callback) ***REMOVED***
    var killed = ***REMOVED******REMOVED***;
    try ***REMOVED***
        Object.keys(tree).forEach(function (pid) ***REMOVED***
            tree[pid].forEach(function (pidpid) ***REMOVED***
                if (!killed[pidpid]) ***REMOVED***
                    killPid(pidpid, signal);
                    killed[pidpid] = 1;
                ***REMOVED***
            ***REMOVED***);
            if (!killed[pid]) ***REMOVED***
                killPid(pid, signal);
                killed[pid] = 1;
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED*** catch (err) ***REMOVED***
        if (callback) ***REMOVED***
            return callback(err);
        ***REMOVED*** else ***REMOVED***
            throw err;
        ***REMOVED***
    ***REMOVED***
    if (callback) ***REMOVED***
        return callback();
    ***REMOVED***
***REMOVED***

function killPid(pid, signal) ***REMOVED***
    try ***REMOVED***
        process.kill(parseInt(pid, 10), signal);
    ***REMOVED***
    catch (err) ***REMOVED***
        if (err.code !== 'ESRCH') throw err;
    ***REMOVED***
***REMOVED***

function buildProcessTree (parentPid, tree, pidsToProcess, spawnChildProcessesList, cb) ***REMOVED***
    var ps = spawnChildProcessesList(parentPid);
    var allData = '';
    ps.stdout.on('data', function (data) ***REMOVED***
        var data = data.toString('ascii');
        allData += data;
    ***REMOVED***);

    var onClose = function (code) ***REMOVED***
        delete pidsToProcess[parentPid];

        if (code != 0) ***REMOVED***
            // no more parent processes
            if (Object.keys(pidsToProcess).length == 0) ***REMOVED***
                cb();
            ***REMOVED***
            return;
        ***REMOVED***

        allData.match(/\d+/g).forEach(function (pid) ***REMOVED***
          pid = parseInt(pid, 10);
          tree[parentPid].push(pid);
          tree[pid] = [];
          pidsToProcess[pid] = 1;
          buildProcessTree(pid, tree, pidsToProcess, spawnChildProcessesList, cb);
        ***REMOVED***);
    ***REMOVED***;

    ps.on('close', onClose);
***REMOVED***
