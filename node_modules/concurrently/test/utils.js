var childProcess = require('child_process');
var _ = require('lodash');
var readline = require('readline')
var shellQuote = require('shell-quote');

// If true, output of commands are shown
var DEBUG_TESTS = process.env.DEBUG_TESTS === 'true';

function run(cmd, opts) ***REMOVED***
    opts = _.merge(***REMOVED***
        // If set to a function, it will be called for each line
        // written to the child process's stdout as (line, child)
        onOutputLine: undefined,
    ***REMOVED***, opts);

    var child;
    var parts = shellQuote.parse(cmd);
    try ***REMOVED***
        child = childProcess.spawn(_.head(parts), _.tail(parts), ***REMOVED***
            stdio: DEBUG_TESTS && !opts.onOutputLine ? 'inherit': null,
        ***REMOVED***);
    ***REMOVED*** catch (e) ***REMOVED***
        return Promise.reject(e);
    ***REMOVED***

    if (opts.onOutputLine) ***REMOVED***
        readLines(child, opts.onOutputLine);
    ***REMOVED***

    return new Promise(function(resolve, reject) ***REMOVED***
        child.on('error', function(err) ***REMOVED***
            reject(err);
        ***REMOVED***);

        child.on('close', function(exitCode) ***REMOVED***
            resolve(exitCode);
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***

function readLines(child, callback) ***REMOVED***
    var rl = readline.createInterface(***REMOVED***
        input: child.stdout,
        output: null
    ***REMOVED***);

    rl.on('line', function(line) ***REMOVED***
        if (DEBUG_TESTS) ***REMOVED***
            console.log(line);
        ***REMOVED***

        callback(line, child)
    ***REMOVED***);
***REMOVED***

module.exports = ***REMOVED***
    run: run
***REMOVED***;
