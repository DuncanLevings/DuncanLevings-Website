'use strict';
const path = require('path');
const os = require('os');
const fs = require('graceful-fs');
const makeDir = require('make-dir');
const xdgBasedir = require('xdg-basedir');
const writeFileAtomic = require('write-file-atomic');
const dotProp = require('dot-prop');
const uniqueString = require('unique-string');

const configDirectory = xdgBasedir.config || path.join(os.tmpdir(), uniqueString());
const permissionError = 'You don\'t have access to this file.';
const makeDirOptions = ***REMOVED***mode: 0o0700***REMOVED***;
const writeFileOptions = ***REMOVED***mode: 0o0600***REMOVED***;

class Configstore ***REMOVED***
	constructor(id, defaults, options = ***REMOVED******REMOVED***) ***REMOVED***
		const pathPrefix = options.globalConfigPath ?
			path.join(id, 'config.json') :
			path.join('configstore', `$***REMOVED***id***REMOVED***.json`);

		this.path = options.configPath || path.join(configDirectory, pathPrefix);

		if (defaults) ***REMOVED***
			this.all = ***REMOVED***
				...defaults,
				...this.all
			***REMOVED***;
		***REMOVED***
	***REMOVED***

	get all() ***REMOVED***
		try ***REMOVED***
			return JSON.parse(fs.readFileSync(this.path, 'utf8'));
		***REMOVED*** catch (error) ***REMOVED***
			// Create directory if it doesn't exist
			if (error.code === 'ENOENT') ***REMOVED***
				return ***REMOVED******REMOVED***;
			***REMOVED***

			// Improve the message of permission errors
			if (error.code === 'EACCES') ***REMOVED***
				error.message = `$***REMOVED***error.message***REMOVED***\n$***REMOVED***permissionError***REMOVED***\n`;
			***REMOVED***

			// Empty the file if it encounters invalid JSON
			if (error.name === 'SyntaxError') ***REMOVED***
				writeFileAtomic.sync(this.path, '', writeFileOptions);
				return ***REMOVED******REMOVED***;
			***REMOVED***

			throw error;
		***REMOVED***
	***REMOVED***

	set all(value) ***REMOVED***
		try ***REMOVED***
			// Make sure the folder exists as it could have been deleted in the meantime
			makeDir.sync(path.dirname(this.path), makeDirOptions);

			writeFileAtomic.sync(this.path, JSON.stringify(value, undefined, '\t'), writeFileOptions);
		***REMOVED*** catch (error) ***REMOVED***
			// Improve the message of permission errors
			if (error.code === 'EACCES') ***REMOVED***
				error.message = `$***REMOVED***error.message***REMOVED***\n$***REMOVED***permissionError***REMOVED***\n`;
			***REMOVED***

			throw error;
		***REMOVED***
	***REMOVED***

	get size() ***REMOVED***
		return Object.keys(this.all || ***REMOVED******REMOVED***).length;
	***REMOVED***

	get(key) ***REMOVED***
		return dotProp.get(this.all, key);
	***REMOVED***

	set(key, value) ***REMOVED***
		const config = this.all;

		if (arguments.length === 1) ***REMOVED***
			for (const k of Object.keys(key)) ***REMOVED***
				dotProp.set(config, k, key[k]);
			***REMOVED***
		***REMOVED*** else ***REMOVED***
			dotProp.set(config, key, value);
		***REMOVED***

		this.all = config;
	***REMOVED***

	has(key) ***REMOVED***
		return dotProp.has(this.all, key);
	***REMOVED***

	delete(key) ***REMOVED***
		const config = this.all;
		dotProp.delete(config, key);
		this.all = config;
	***REMOVED***

	clear() ***REMOVED***
		this.all = ***REMOVED******REMOVED***;
	***REMOVED***
***REMOVED***

module.exports = Configstore;
