'use strict';
// TODO: Use the `URL` global when targeting Node.js 10
const URLParser = typeof URL === 'undefined' ? require('url').URL : URL;

// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
const DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';
const DATA_URL_DEFAULT_CHARSET = 'us-ascii';

const testParameter = (name, filters) => ***REMOVED***
	return filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);
***REMOVED***;

const normalizeDataURL = (urlString, ***REMOVED***stripHash***REMOVED***) => ***REMOVED***
	const parts = urlString.match(/^data:(.*?),(.*?)(?:#(.*))?$/);

	if (!parts) ***REMOVED***
		throw new Error(`Invalid URL: $***REMOVED***urlString***REMOVED***`);
	***REMOVED***

	const mediaType = parts[1].split(';');
	const body = parts[2];
	const hash = stripHash ? '' : parts[3];

	let base64 = false;

	if (mediaType[mediaType.length - 1] === 'base64') ***REMOVED***
		mediaType.pop();
		base64 = true;
	***REMOVED***

	// Lowercase MIME type
	const mimeType = (mediaType.shift() || '').toLowerCase();
	const attributes = mediaType
		.map(attribute => ***REMOVED***
			let [key, value = ''] = attribute.split('=').map(string => string.trim());

			// Lowercase `charset`
			if (key === 'charset') ***REMOVED***
				value = value.toLowerCase();

				if (value === DATA_URL_DEFAULT_CHARSET) ***REMOVED***
					return '';
				***REMOVED***
			***REMOVED***

			return `$***REMOVED***key***REMOVED***$***REMOVED***value ? `=$***REMOVED***value***REMOVED***` : ''***REMOVED***`;
		***REMOVED***)
		.filter(Boolean);

	const normalizedMediaType = [
		...attributes
	];

	if (base64) ***REMOVED***
		normalizedMediaType.push('base64');
	***REMOVED***

	if (normalizedMediaType.length !== 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) ***REMOVED***
		normalizedMediaType.unshift(mimeType);
	***REMOVED***

	return `data:$***REMOVED***normalizedMediaType.join(';')***REMOVED***,$***REMOVED***base64 ? body.trim() : body***REMOVED***$***REMOVED***hash ? `#$***REMOVED***hash***REMOVED***` : ''***REMOVED***`;
***REMOVED***;

const normalizeUrl = (urlString, options) => ***REMOVED***
	options = ***REMOVED***
		defaultProtocol: 'http:',
		normalizeProtocol: true,
		forceHttp: false,
		forceHttps: false,
		stripAuthentication: true,
		stripHash: false,
		stripWWW: true,
		removeQueryParameters: [/^utm_\w+/i],
		removeTrailingSlash: true,
		removeDirectoryIndex: false,
		sortQueryParameters: true,
		...options
	***REMOVED***;

	// TODO: Remove this at some point in the future
	if (Reflect.has(options, 'normalizeHttps')) ***REMOVED***
		throw new Error('options.normalizeHttps is renamed to options.forceHttp');
	***REMOVED***

	if (Reflect.has(options, 'normalizeHttp')) ***REMOVED***
		throw new Error('options.normalizeHttp is renamed to options.forceHttps');
	***REMOVED***

	if (Reflect.has(options, 'stripFragment')) ***REMOVED***
		throw new Error('options.stripFragment is renamed to options.stripHash');
	***REMOVED***

	urlString = urlString.trim();

	// Data URL
	if (/^data:/i.test(urlString)) ***REMOVED***
		return normalizeDataURL(urlString, options);
	***REMOVED***

	const hasRelativeProtocol = urlString.startsWith('//');
	const isRelativeUrl = !hasRelativeProtocol && /^\.*\//.test(urlString);

	// Prepend protocol
	if (!isRelativeUrl) ***REMOVED***
		urlString = urlString.replace(/^(?!(?:\w+:)?\/\/)|^\/\//, options.defaultProtocol);
	***REMOVED***

	const urlObj = new URLParser(urlString);

	if (options.forceHttp && options.forceHttps) ***REMOVED***
		throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');
	***REMOVED***

	if (options.forceHttp && urlObj.protocol === 'https:') ***REMOVED***
		urlObj.protocol = 'http:';
	***REMOVED***

	if (options.forceHttps && urlObj.protocol === 'http:') ***REMOVED***
		urlObj.protocol = 'https:';
	***REMOVED***

	// Remove auth
	if (options.stripAuthentication) ***REMOVED***
		urlObj.username = '';
		urlObj.password = '';
	***REMOVED***

	// Remove hash
	if (options.stripHash) ***REMOVED***
		urlObj.hash = '';
	***REMOVED***

	// Remove duplicate slashes if not preceded by a protocol
	if (urlObj.pathname) ***REMOVED***
		// TODO: Use the following instead when targeting Node.js 10
		// `urlObj.pathname = urlObj.pathname.replace(/(?<!https?:)\/***REMOVED***2,***REMOVED***/g, '/');`
		urlObj.pathname = urlObj.pathname.replace(/((?!:).|^)\/***REMOVED***2,***REMOVED***/g, (_, p1) => ***REMOVED***
			if (/^(?!\/)/g.test(p1)) ***REMOVED***
				return `$***REMOVED***p1***REMOVED***/`;
			***REMOVED***

			return '/';
		***REMOVED***);
	***REMOVED***

	// Decode URI octets
	if (urlObj.pathname) ***REMOVED***
		urlObj.pathname = decodeURI(urlObj.pathname);
	***REMOVED***

	// Remove directory index
	if (options.removeDirectoryIndex === true) ***REMOVED***
		options.removeDirectoryIndex = [/^index\.[a-z]+$/];
	***REMOVED***

	if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) ***REMOVED***
		let pathComponents = urlObj.pathname.split('/');
		const lastComponent = pathComponents[pathComponents.length - 1];

		if (testParameter(lastComponent, options.removeDirectoryIndex)) ***REMOVED***
			pathComponents = pathComponents.slice(0, pathComponents.length - 1);
			urlObj.pathname = pathComponents.slice(1).join('/') + '/';
		***REMOVED***
	***REMOVED***

	if (urlObj.hostname) ***REMOVED***
		// Remove trailing dot
		urlObj.hostname = urlObj.hostname.replace(/\.$/, '');

		// Remove `www.`
		if (options.stripWWW && /^www\.([a-z\-\d]***REMOVED***2,63***REMOVED***)\.([a-z.]***REMOVED***2,5***REMOVED***)$/.test(urlObj.hostname)) ***REMOVED***
			// Each label should be max 63 at length (min: 2).
			// The extension should be max 5 at length (min: 2).
			// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names
			urlObj.hostname = urlObj.hostname.replace(/^www\./, '');
		***REMOVED***
	***REMOVED***

	// Remove query unwanted parameters
	if (Array.isArray(options.removeQueryParameters)) ***REMOVED***
		for (const key of [...urlObj.searchParams.keys()]) ***REMOVED***
			if (testParameter(key, options.removeQueryParameters)) ***REMOVED***
				urlObj.searchParams.delete(key);
			***REMOVED***
		***REMOVED***
	***REMOVED***

	// Sort query parameters
	if (options.sortQueryParameters) ***REMOVED***
		urlObj.searchParams.sort();
	***REMOVED***

	if (options.removeTrailingSlash) ***REMOVED***
		urlObj.pathname = urlObj.pathname.replace(/\/$/, '');
	***REMOVED***

	// Take advantage of many of the Node `url` normalizations
	urlString = urlObj.toString();

	// Remove ending `/`
	if ((options.removeTrailingSlash || urlObj.pathname === '/') && urlObj.hash === '') ***REMOVED***
		urlString = urlString.replace(/\/$/, '');
	***REMOVED***

	// Restore relative protocol, if applicable
	if (hasRelativeProtocol && !options.normalizeProtocol) ***REMOVED***
		urlString = urlString.replace(/^http:\/\//, '//');
	***REMOVED***

	// Remove http/https
	if (options.stripProtocol) ***REMOVED***
		urlString = urlString.replace(/^(?:https?:)?\/\//, '');
	***REMOVED***

	return urlString;
***REMOVED***;

module.exports = normalizeUrl;
// TODO: Remove this for the next major release
module.exports.default = normalizeUrl;
