'use strict';
const ***REMOVED***URL***REMOVED*** = require('url');
const ***REMOVED***Agent: HttpAgent***REMOVED*** = require('http');
const ***REMOVED***Agent: HttpsAgent***REMOVED*** = require('https');
const got = require('got');
const registryUrl = require('registry-url');
const registryAuthToken = require('registry-auth-token');
const semver = require('semver');

// These agent options are chosen to match the npm client defaults and help with performance
// See: `npm config get maxsockets` and #50
const agentOptions = ***REMOVED***
	keepAlive: true,
	maxSockets: 50
***REMOVED***;
const httpAgent = new HttpAgent(agentOptions);
const httpsAgent = new HttpsAgent(agentOptions);

class PackageNotFoundError extends Error ***REMOVED***
	constructor(packageName) ***REMOVED***
		super(`Package \`$***REMOVED***packageName***REMOVED***\` could not be found`);
		this.name = 'PackageNotFoundError';
	***REMOVED***
***REMOVED***

class VersionNotFoundError extends Error ***REMOVED***
	constructor(packageName, version) ***REMOVED***
		super(`Version \`$***REMOVED***version***REMOVED***\` for package \`$***REMOVED***packageName***REMOVED***\` could not be found`);
		this.name = 'VersionNotFoundError';
	***REMOVED***
***REMOVED***

const packageJson = async (packageName, options) => ***REMOVED***
	options = ***REMOVED***
		version: 'latest',
		...options
	***REMOVED***;

	const scope = packageName.split('/')[0];
	const registryUrl_ = options.registryUrl || registryUrl(scope);
	const packageUrl = new URL(encodeURIComponent(packageName).replace(/^%40/, '@'), registryUrl_);
	const authInfo = registryAuthToken(registryUrl_.toString(), ***REMOVED***recursive: true***REMOVED***);

	const headers = ***REMOVED***
		accept: 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'
	***REMOVED***;

	if (options.fullMetadata) ***REMOVED***
		delete headers.accept;
	***REMOVED***

	if (authInfo) ***REMOVED***
		headers.authorization = `$***REMOVED***authInfo.type***REMOVED*** $***REMOVED***authInfo.token***REMOVED***`;
	***REMOVED***

	const gotOptions = ***REMOVED***
		json: true,
		headers,
		agent: ***REMOVED***
			http: httpAgent,
			https: httpsAgent
		***REMOVED***
	***REMOVED***;

	if (options.agent) ***REMOVED***
		gotOptions.agent = options.agent;
	***REMOVED***

	let response;
	try ***REMOVED***
		response = await got(packageUrl, gotOptions);
	***REMOVED*** catch (error) ***REMOVED***
		if (error.statusCode === 404) ***REMOVED***
			throw new PackageNotFoundError(packageName);
		***REMOVED***

		throw error;
	***REMOVED***

	let data = response.body;

	if (options.allVersions) ***REMOVED***
		return data;
	***REMOVED***

	let ***REMOVED***version***REMOVED*** = options;
	const versionError = new VersionNotFoundError(packageName, version);

	if (data['dist-tags'][version]) ***REMOVED***
		data = data.versions[data['dist-tags'][version]];
	***REMOVED*** else if (version) ***REMOVED***
		if (!data.versions[version]) ***REMOVED***
			const versions = Object.keys(data.versions);
			version = semver.maxSatisfying(versions, version);

			if (!version) ***REMOVED***
				throw versionError;
			***REMOVED***
		***REMOVED***

		data = data.versions[version];

		if (!data) ***REMOVED***
			throw versionError;
		***REMOVED***
	***REMOVED***

	return data;
***REMOVED***;

module.exports = packageJson;
// TODO: remove this in the next major version
module.exports.default = packageJson;
module.exports.PackageNotFoundError = PackageNotFoundError;
module.exports.VersionNotFoundError = VersionNotFoundError;
