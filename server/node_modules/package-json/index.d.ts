/// <reference types="node"/>
import ***REMOVED***Agent as HttpAgent***REMOVED*** from 'http';
import ***REMOVED***Agent as HttpsAgent***REMOVED*** from 'https';

declare class VersionNotFoundErrorClass extends Error ***REMOVED***
	readonly name: 'VersionNotFoundError';

	constructor(packageName: string, version: string);
***REMOVED***

declare class PackageNotFoundErrorClass extends Error ***REMOVED***
	readonly name: 'PackageNotFoundError';

	constructor(packageName: string);
***REMOVED***

declare namespace packageJson ***REMOVED***
	interface Agents ***REMOVED***
		http?: HttpAgent;
		https?: HttpsAgent;
	***REMOVED***

	interface Options ***REMOVED***
		/**
		Package version such as `1.0.0` or a [dist tag](https://docs.npmjs.com/cli/dist-tag) such as `latest`.

		The version can also be in any format supported by the [semver](https://github.com/npm/node-semver) module. For example:
		- `1` - Get the latest `1.x.x`
		- `1.2` - Get the latest `1.2.x`
		- `^1.2.3` - Get the latest `1.x.x` but at least `1.2.3`
		- `~1.2.3` - Get the latest `1.2.x` but at least `1.2.3`

		@default 'latest'
		*/
		readonly version?: string;

		/**
		By default, only an abbreviated metadata object is returned for performance reasons. [Read more.](https://github.com/npm/registry/blob/master/docs/responses/package-metadata.md)

		@default false
		*/
		readonly fullMetadata?: boolean;

		/**
		Return the [main entry](https://registry.npmjs.org/ava) containing all versions.

		@default false
		*/
		readonly allVersions?: boolean;

		/**
		The registry URL is by default inferred from the npm defaults and `.npmrc`. This is beneficial as `package-json` and any project using it will work just like npm. This option is*only** intended for internal tools. You should*not** use this option in reusable packages. Prefer just using `.npmrc` whenever possible.
		*/
		readonly registryUrl?: string;

		/**
		Overwrite the `agent` option that is passed down to [`got`](https://github.com/sindresorhus/got#agent). This might be useful to add [proxy support](https://github.com/sindresorhus/got#proxies).
		*/
		readonly agent?: HttpAgent | HttpsAgent | Agents | false;
	***REMOVED***

	interface FullMetadataOptions extends Options ***REMOVED***
		/**
		By default, only an abbreviated metadata object is returned for performance reasons. [Read more.](https://github.com/npm/registry/blob/master/docs/responses/package-metadata.md)

		@default false
		*/
		readonly fullMetadata: true;
	***REMOVED***

	interface DistTags ***REMOVED***
		readonly latest: string;
		readonly [tagName: string]: string;
	***REMOVED***

	interface AbbreviatedMetadata ***REMOVED***
		readonly 'dist-tags': DistTags;
		readonly modified: string;
		readonly name: string;
		readonly versions: ***REMOVED***readonly [version: string]: AbbreviatedVersion***REMOVED***;
		readonly [key: string]: unknown;
	***REMOVED***

	interface AbbreviatedVersion ***REMOVED***
		readonly name: string;
		readonly version: string;
		readonly dist: ***REMOVED***
			readonly shasum: string;
			readonly tarball: string;
			readonly integrity?: string;
		***REMOVED***;
		readonly deprecated?: string;
		readonly dependencies?: ***REMOVED***readonly [name: string]: string***REMOVED***;
		readonly optionalDependencies?: ***REMOVED***readonly [name: string]: string***REMOVED***;
		readonly devDependencies?: ***REMOVED***readonly [name: string]: string***REMOVED***;
		readonly bundleDependencies?: ***REMOVED***readonly [name: string]: string***REMOVED***;
		readonly peerDependencies?: ***REMOVED***readonly [name: string]: string***REMOVED***;
		readonly bin?: ***REMOVED***readonly [key: string]: string***REMOVED***;
		readonly directories?: readonly string[];
		readonly engines?: ***REMOVED***readonly [type: string]: string***REMOVED***;
		readonly _hasShrinkwrap?: boolean;
		readonly [key: string]: unknown;
	***REMOVED***

	interface Person ***REMOVED***
		readonly name?: string;
		readonly email?: string;
		readonly url?: string;
	***REMOVED***

	interface HoistedData ***REMOVED***
		readonly author?: Person;
		readonly bugs?:
			| ***REMOVED***readonly url: string; readonly email?: string***REMOVED***
			| ***REMOVED***readonly url?: string; readonly email: string***REMOVED***;
		readonly contributors?: readonly Person[];
		readonly description?: string;
		readonly homepage?: string;
		readonly keywords?: readonly string[];
		readonly license?: string;
		readonly maintainers?: readonly Person[];
		readonly readme?: string;
		readonly readmeFilename?: string;
		readonly repository?: ***REMOVED***readonly type: string; readonly url: string***REMOVED***;
	***REMOVED***

	interface FullMetadata extends AbbreviatedMetadata, HoistedData ***REMOVED***
		readonly _id: string;
		readonly _rev: string;
		readonly time: ***REMOVED***
			readonly created: string;
			readonly modified: string;
			readonly [version: string]: string;
		***REMOVED***;
		readonly users?: ***REMOVED***readonly [user: string]: boolean***REMOVED***;
		readonly versions: ***REMOVED***readonly [version: string]: FullVersion***REMOVED***;
		readonly [key: string]: unknown;
	***REMOVED***

	interface FullVersion extends AbbreviatedVersion, HoistedData ***REMOVED***
		readonly _id: string;
		readonly _nodeVersion: string;
		readonly _npmUser: string;
		readonly _npmVersion: string;
		readonly main?: string;
		readonly files?: readonly string[];
		readonly man?: readonly string[];
		readonly scripts?: ***REMOVED***readonly [scriptName: string]: string***REMOVED***;
		readonly gitHead?: string;
		readonly types?: string;
		readonly typings?: string;
		readonly [key: string]: unknown;
	***REMOVED***

	type VersionNotFoundError = VersionNotFoundErrorClass;
	type PackageNotFoundError = PackageNotFoundErrorClass;
***REMOVED***

declare const packageJson: ***REMOVED***
	/**
	Get metadata of a package from the npm registry.

	@param packageName - Name of the package.

	@example
	```
	import packageJson = require('package-json');

	(async () => ***REMOVED***
		console.log(await packageJson('ava'));
		//=> ***REMOVED***name: 'ava', ...***REMOVED***

		// Also works with scoped packages
		console.log(await packageJson('@sindresorhus/df'));
	***REMOVED***)();
	```
	*/
	(packageName: string, options: packageJson.FullMetadataOptions): Promise<
		packageJson.FullMetadata
	>;
	(packageName: string, options?: packageJson.Options): Promise<
		packageJson.AbbreviatedMetadata
	>;

	/**
	The error thrown when the given package version cannot be found.
	*/
	VersionNotFoundError: typeof VersionNotFoundErrorClass;

	/**
	The error thrown when the given package name cannot be found.
	*/
	PackageNotFoundError: typeof PackageNotFoundErrorClass;

	// TODO: remove this in the next major version
	default: typeof packageJson;
***REMOVED***;

export = packageJson;
