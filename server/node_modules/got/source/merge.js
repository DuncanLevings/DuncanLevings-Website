'use strict';
const ***REMOVED***URL***REMOVED*** = require('url');
const is = require('@sindresorhus/is');
const knownHookEvents = require('./known-hook-events');

const merge = (target, ...sources) => ***REMOVED***
	for (const source of sources) ***REMOVED***
		for (const [key, sourceValue] of Object.entries(source)) ***REMOVED***
			if (is.undefined(sourceValue)) ***REMOVED***
				continue;
			***REMOVED***

			const targetValue = target[key];
			if (is.urlInstance(targetValue) && (is.urlInstance(sourceValue) || is.string(sourceValue))) ***REMOVED***
				target[key] = new URL(sourceValue, targetValue);
			***REMOVED*** else if (is.plainObject(sourceValue)) ***REMOVED***
				if (is.plainObject(targetValue)) ***REMOVED***
					target[key] = merge(***REMOVED******REMOVED***, targetValue, sourceValue);
				***REMOVED*** else ***REMOVED***
					target[key] = merge(***REMOVED******REMOVED***, sourceValue);
				***REMOVED***
			***REMOVED*** else if (is.array(sourceValue)) ***REMOVED***
				target[key] = merge([], sourceValue);
			***REMOVED*** else ***REMOVED***
				target[key] = sourceValue;
			***REMOVED***
		***REMOVED***
	***REMOVED***

	return target;
***REMOVED***;

const mergeOptions = (...sources) => ***REMOVED***
	sources = sources.map(source => source || ***REMOVED******REMOVED***);
	const merged = merge(***REMOVED******REMOVED***, ...sources);

	const hooks = ***REMOVED******REMOVED***;
	for (const hook of knownHookEvents) ***REMOVED***
		hooks[hook] = [];
	***REMOVED***

	for (const source of sources) ***REMOVED***
		if (source.hooks) ***REMOVED***
			for (const hook of knownHookEvents) ***REMOVED***
				hooks[hook] = hooks[hook].concat(source.hooks[hook]);
			***REMOVED***
		***REMOVED***
	***REMOVED***

	merged.hooks = hooks;

	return merged;
***REMOVED***;

const mergeInstances = (instances, methods) => ***REMOVED***
	const handlers = instances.map(instance => instance.defaults.handler);
	const size = instances.length - 1;

	return ***REMOVED***
		methods,
		options: mergeOptions(...instances.map(instance => instance.defaults.options)),
		handler: (options, next) => ***REMOVED***
			let iteration = -1;
			const iterate = options => handlers[++iteration](options, iteration === size ? next : iterate);

			return iterate(options);
		***REMOVED***
	***REMOVED***;
***REMOVED***;

module.exports = merge;
module.exports.options = mergeOptions;
module.exports.instances = mergeInstances;
