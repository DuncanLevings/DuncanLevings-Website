'use strict';

class CancelError extends Error ***REMOVED***
	constructor(reason) ***REMOVED***
		super(reason || 'Promise was canceled');
		this.name = 'CancelError';
	***REMOVED***

	get isCanceled() ***REMOVED***
		return true;
	***REMOVED***
***REMOVED***

class PCancelable ***REMOVED***
	static fn(userFn) ***REMOVED***
		return (...args) => ***REMOVED***
			return new PCancelable((resolve, reject, onCancel) => ***REMOVED***
				args.push(onCancel);
				userFn(...args).then(resolve, reject);
			***REMOVED***);
		***REMOVED***;
	***REMOVED***

	constructor(executor) ***REMOVED***
		this._cancelHandlers = [];
		this._isPending = true;
		this._isCanceled = false;
		this._rejectOnCancel = true;

		this._promise = new Promise((resolve, reject) => ***REMOVED***
			this._reject = reject;

			const onResolve = value => ***REMOVED***
				this._isPending = false;
				resolve(value);
			***REMOVED***;

			const onReject = error => ***REMOVED***
				this._isPending = false;
				reject(error);
			***REMOVED***;

			const onCancel = handler => ***REMOVED***
				this._cancelHandlers.push(handler);
			***REMOVED***;

			Object.defineProperties(onCancel, ***REMOVED***
				shouldReject: ***REMOVED***
					get: () => this._rejectOnCancel,
					set: bool => ***REMOVED***
						this._rejectOnCancel = bool;
					***REMOVED***
				***REMOVED***
			***REMOVED***);

			return executor(onResolve, onReject, onCancel);
		***REMOVED***);
	***REMOVED***

	then(onFulfilled, onRejected) ***REMOVED***
		return this._promise.then(onFulfilled, onRejected);
	***REMOVED***

	catch(onRejected) ***REMOVED***
		return this._promise.catch(onRejected);
	***REMOVED***

	finally(onFinally) ***REMOVED***
		return this._promise.finally(onFinally);
	***REMOVED***

	cancel(reason) ***REMOVED***
		if (!this._isPending || this._isCanceled) ***REMOVED***
			return;
		***REMOVED***

		if (this._cancelHandlers.length > 0) ***REMOVED***
			try ***REMOVED***
				for (const handler of this._cancelHandlers) ***REMOVED***
					handler();
				***REMOVED***
			***REMOVED*** catch (error) ***REMOVED***
				this._reject(error);
			***REMOVED***
		***REMOVED***

		this._isCanceled = true;
		if (this._rejectOnCancel) ***REMOVED***
			this._reject(new CancelError(reason));
		***REMOVED***
	***REMOVED***

	get isCanceled() ***REMOVED***
		return this._isCanceled;
	***REMOVED***
***REMOVED***

Object.setPrototypeOf(PCancelable.prototype, Promise.prototype);

module.exports = PCancelable;
module.exports.default = PCancelable;

module.exports.CancelError = CancelError;
