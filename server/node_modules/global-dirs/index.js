'use strict';
const path = require('path');
const os = require('os');
const fs = require('fs');
const ini = require('ini');

const isWindows = process.platform === 'win32';

const readRc = filePath => ***REMOVED***
	try ***REMOVED***
		return ini.parse(fs.readFileSync(filePath, 'utf8')).prefix;
	***REMOVED*** catch (_) ***REMOVED******REMOVED***
***REMOVED***;

const getEnvNpmPrefix = () => ***REMOVED***
	return Object.keys(process.env).reduce((prefix, name) => ***REMOVED***
		return (/^npm_config_prefix$/i).test(name) ? process.env[name] : prefix;
	***REMOVED***, undefined);
***REMOVED***;

const getGlobalNpmrc = () => ***REMOVED***
	if (isWindows && process.env.APPDATA) ***REMOVED***
		// Hardcoded contents of `c:\Program Files\nodejs\node_modules\npm\npmrc`
		return path.join(process.env.APPDATA, '/npm/etc/npmrc');
	***REMOVED***

	// Homebrew special case: `$(brew --prefix)/lib/node_modules/npm/npmrc`
	if (process.execPath.includes('/Cellar/node')) ***REMOVED***
		const homebrewPrefix = process.execPath.slice(0, process.execPath.indexOf('/Cellar/node'));
		return path.join(homebrewPrefix, '/lib/node_modules/npm/npmrc');
	***REMOVED***

	if (process.execPath.endsWith('/bin/node')) ***REMOVED***
		const installDir = path.dirname(path.dirname(process.execPath));
		return path.join(installDir, '/etc/npmrc');
	***REMOVED***
***REMOVED***;

const getDefaultNpmPrefix = () => ***REMOVED***
	if (isWindows) ***REMOVED***
		// `c:\node\node.exe` → `prefix=c:\node\`
		return path.dirname(process.execPath);
	***REMOVED***

	// `/usr/local/bin/node` → `prefix=/usr/local`
	return path.dirname(path.dirname(process.execPath));
***REMOVED***;

const getNpmPrefix = () => ***REMOVED***
	const envPrefix = getEnvNpmPrefix();
	if (envPrefix) ***REMOVED***
		return envPrefix;
	***REMOVED***

	const homePrefix = readRc(path.join(os.homedir(), '.npmrc'));
	if (homePrefix) ***REMOVED***
		return homePrefix;
	***REMOVED***

	if (process.env.PREFIX) ***REMOVED***
		return process.env.PREFIX;
	***REMOVED***

	const globalPrefix = readRc(getGlobalNpmrc());
	if (globalPrefix) ***REMOVED***
		return globalPrefix;
	***REMOVED***

	return getDefaultNpmPrefix();
***REMOVED***;

const npmPrefix = path.resolve(getNpmPrefix());

const getYarnWindowsDirectory = () => ***REMOVED***
	if (isWindows && process.env.LOCALAPPDATA) ***REMOVED***
		const dir = path.join(process.env.LOCALAPPDATA, 'Yarn');
		if (fs.existsSync(dir)) ***REMOVED***
			return dir;
		***REMOVED***
	***REMOVED***

	return false;
***REMOVED***;

const getYarnPrefix = () => ***REMOVED***
	if (process.env.PREFIX) ***REMOVED***
		return process.env.PREFIX;
	***REMOVED***

	const windowsPrefix = getYarnWindowsDirectory();
	if (windowsPrefix) ***REMOVED***
		return windowsPrefix;
	***REMOVED***

	const configPrefix = path.join(os.homedir(), '.config/yarn');
	if (fs.existsSync(configPrefix)) ***REMOVED***
		return configPrefix;
	***REMOVED***

	const homePrefix = path.join(os.homedir(), '.yarn-config');
	if (fs.existsSync(homePrefix)) ***REMOVED***
		return homePrefix;
	***REMOVED***

	// Yarn supports the npm conventions but the inverse is not true
	return npmPrefix;
***REMOVED***;

exports.npm = ***REMOVED******REMOVED***;
exports.npm.prefix = npmPrefix;
exports.npm.packages = path.join(npmPrefix, isWindows ? 'node_modules' : 'lib/node_modules');
exports.npm.binaries = isWindows ? npmPrefix : path.join(npmPrefix, 'bin');

const yarnPrefix = path.resolve(getYarnPrefix());
exports.yarn = ***REMOVED******REMOVED***;
exports.yarn.prefix = yarnPrefix;
exports.yarn.packages = path.join(yarnPrefix, getYarnWindowsDirectory() ? 'Data/global/node_modules' : 'global/node_modules');
exports.yarn.binaries = path.join(exports.yarn.packages, '.bin');
