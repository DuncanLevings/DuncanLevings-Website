'use strict';

const EventEmitter = require('events');
const JSONB = require('json-buffer');

const loadStore = opts => ***REMOVED***
	const adapters = ***REMOVED***
		redis: '@keyv/redis',
		mongodb: '@keyv/mongo',
		mongo: '@keyv/mongo',
		sqlite: '@keyv/sqlite',
		postgresql: '@keyv/postgres',
		postgres: '@keyv/postgres',
		mysql: '@keyv/mysql'
	***REMOVED***;
	if (opts.adapter || opts.uri) ***REMOVED***
		const adapter = opts.adapter || /^[^:]*/.exec(opts.uri)[0];
		return new (require(adapters[adapter]))(opts);
	***REMOVED***
	return new Map();
***REMOVED***;

class Keyv extends EventEmitter ***REMOVED***
	constructor(uri, opts) ***REMOVED***
		super();
		this.opts = Object.assign(
			***REMOVED***
				namespace: 'keyv',
				serialize: JSONB.stringify,
				deserialize: JSONB.parse
			***REMOVED***,
			(typeof uri === 'string') ? ***REMOVED*** uri ***REMOVED*** : uri,
			opts
		);

		if (!this.opts.store) ***REMOVED***
			const adapterOpts = Object.assign(***REMOVED******REMOVED***, this.opts);
			this.opts.store = loadStore(adapterOpts);
		***REMOVED***

		if (typeof this.opts.store.on === 'function') ***REMOVED***
			this.opts.store.on('error', err => this.emit('error', err));
		***REMOVED***

		this.opts.store.namespace = this.opts.namespace;
	***REMOVED***

	_getKeyPrefix(key) ***REMOVED***
		return `$***REMOVED***this.opts.namespace***REMOVED***:$***REMOVED***key***REMOVED***`;
	***REMOVED***

	get(key) ***REMOVED***
		key = this._getKeyPrefix(key);
		const store = this.opts.store;
		return Promise.resolve()
			.then(() => store.get(key))
			.then(data => ***REMOVED***
				data = (typeof data === 'string') ? this.opts.deserialize(data) : data;
				if (data === undefined) ***REMOVED***
					return undefined;
				***REMOVED***
				if (typeof data.expires === 'number' && Date.now() > data.expires) ***REMOVED***
					this.delete(key);
					return undefined;
				***REMOVED***
				return data.value;
			***REMOVED***);
	***REMOVED***

	set(key, value, ttl) ***REMOVED***
		key = this._getKeyPrefix(key);
		if (typeof ttl === 'undefined') ***REMOVED***
			ttl = this.opts.ttl;
		***REMOVED***
		if (ttl === 0) ***REMOVED***
			ttl = undefined;
		***REMOVED***
		const store = this.opts.store;

		return Promise.resolve()
			.then(() => ***REMOVED***
				const expires = (typeof ttl === 'number') ? (Date.now() + ttl) : null;
				value = ***REMOVED*** value, expires ***REMOVED***;
				return store.set(key, this.opts.serialize(value), ttl);
			***REMOVED***)
			.then(() => true);
	***REMOVED***

	delete(key) ***REMOVED***
		key = this._getKeyPrefix(key);
		const store = this.opts.store;
		return Promise.resolve()
			.then(() => store.delete(key));
	***REMOVED***

	clear() ***REMOVED***
		const store = this.opts.store;
		return Promise.resolve()
			.then(() => store.clear());
	***REMOVED***
***REMOVED***

module.exports = Keyv;
