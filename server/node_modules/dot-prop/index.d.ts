declare const dotProp: ***REMOVED***
	/**
	@param object - Object to get the `path` value.
	@param path - Path of the property in the object, using `.` to separate each nested key. Use `\\.` if you have a `.` in the key.
	@param defaultValue - Default value.

	@example
	```
	import dotProp = require('dot-prop');

	dotProp.get(***REMOVED***foo: ***REMOVED***bar: 'unicorn'***REMOVED******REMOVED***, 'foo.bar');
	//=> 'unicorn'

	dotProp.get(***REMOVED***foo: ***REMOVED***bar: 'a'***REMOVED******REMOVED***, 'foo.notDefined.deep');
	//=> undefined

	dotProp.get(***REMOVED***foo: ***REMOVED***bar: 'a'***REMOVED******REMOVED***, 'foo.notDefined.deep', 'default value');
	//=> 'default value'

	dotProp.get(***REMOVED***foo: ***REMOVED***'dot.dot': 'unicorn'***REMOVED******REMOVED***, 'foo.dot\\.dot');
	//=> 'unicorn'
	```
	*/
	get<T>(
		object: ***REMOVED***[key: string]: any***REMOVED*** | undefined,
		path: string
	): T | undefined;
	get<T>(
		object: ***REMOVED***[key: string]: any***REMOVED*** | undefined,
		path: string,
		defaultValue: T
	): T;

	/**
	@param object - Object to set the `path` value.
	@param path - Path of the property in the object, using `.` to separate each nested key. Use `\\.` if you have a `.` in the key.
	@param value - Value to set at `path`.

	@example
	```
	import dotProp = require('dot-prop');

	const object = ***REMOVED***foo: ***REMOVED***bar: 'a'***REMOVED******REMOVED***;
	dotProp.set(object, 'foo.bar', 'b');
	console.log(object);
	//=> ***REMOVED***foo: ***REMOVED***bar: 'b'***REMOVED******REMOVED***

	const foo = dotProp.set(***REMOVED******REMOVED***, 'foo.bar', 'c');
	console.log(foo);
	//=> ***REMOVED***foo: ***REMOVED***bar: 'c'***REMOVED******REMOVED***

	dotProp.set(object, 'foo.baz', 'x');
	console.log(object);
	//=> ***REMOVED***foo: ***REMOVED***bar: 'b', baz: 'x'***REMOVED******REMOVED***
	```
	*/
	set<T extends ***REMOVED***[key: string]: any***REMOVED***>(
		object: T,
		path: string,
		value: unknown
	): T;

	/**
	@param object - Object to test the `path` value.
	@param path - Path of the property in the object, using `.` to separate each nested key. Use `\\.` if you have a `.` in the key.

	@example
	```
	import dotProp = require('dot-prop');

	dotProp.has(***REMOVED***foo: ***REMOVED***bar: 'unicorn'***REMOVED******REMOVED***, 'foo.bar');
	//=> true
	```
	*/
	has(object: ***REMOVED***[key: string]: any***REMOVED*** | undefined, path: string): boolean;

	/**
	@param object - Object to delete the `path` value.
	@param path - Path of the property in the object, using `.` to separate each nested key. Use `\\.` if you have a `.` in the key.

	@example
	```
	import dotProp = require('dot-prop');

	const object = ***REMOVED***foo: ***REMOVED***bar: 'a'***REMOVED******REMOVED***;
	dotProp.delete(object, 'foo.bar');
	console.log(object);
	//=> ***REMOVED***foo: ***REMOVED******REMOVED******REMOVED***

	object.foo.bar = ***REMOVED***x: 'y', y: 'x'***REMOVED***;
	dotProp.delete(object, 'foo.bar.x');
	console.log(object);
	//=> ***REMOVED***foo: ***REMOVED***bar: ***REMOVED***y: 'x'***REMOVED******REMOVED******REMOVED***
	```
	*/
	delete(object: ***REMOVED***[key: string]: any***REMOVED***, path: string): void;
***REMOVED***;

export = dotProp;
